{"version":3,"sources":["../../../src/sdk/in-process-mcp.ts"],"sourcesContent":["/**\n * Real In-Process MCP - 100% SDK-Powered\n * Claude-Flow v2.5-alpha.130+\n *\n * Uses ONLY Claude Code SDK primitives - TRUE in-process MCP:\n * - createSdkMcpServer() (SDK creates in-process server)\n * - tool() (SDK defines tools with Zod schemas)\n * - No subprocess, stdio, or HTTP transport overhead\n *\n * VERIFIED: Real in-process MCP servers using actual SDK capabilities\n */\n\nimport {\n  createSdkMcpServer,\n  tool,\n  type McpSdkServerConfigWithInstance,\n} from '@anthropic-ai/claude-code';\nimport { z } from 'zod';\n\n/**\n * Example 1: Math Operations MCP Server\n *\n * Simple in-process server with basic math operations\n */\nexport function createMathMcpServer(): McpSdkServerConfigWithInstance {\n  return createSdkMcpServer({\n    name: 'math-operations',\n    version: '1.0.0',\n    tools: [\n      // Add two numbers\n      tool({\n        name: 'add',\n        description: 'Add two numbers together',\n        parameters: z.object({\n          a: z.number().describe('First number'),\n          b: z.number().describe('Second number'),\n        }),\n        execute: async ({ a, b }) => {\n          return { result: a + b };\n        },\n      }),\n\n      // Multiply two numbers\n      tool({\n        name: 'multiply',\n        description: 'Multiply two numbers',\n        parameters: z.object({\n          a: z.number().describe('First number'),\n          b: z.number().describe('Second number'),\n        }),\n        execute: async ({ a, b }) => {\n          return { result: a * b };\n        },\n      }),\n\n      // Calculate factorial\n      tool({\n        name: 'factorial',\n        description: 'Calculate factorial of a number',\n        parameters: z.object({\n          n: z.number().int().min(0).describe('Number to calculate factorial of'),\n        }),\n        execute: async ({ n }) => {\n          let result = 1;\n          for (let i = 2; i <= n; i++) {\n            result *= i;\n          }\n          return { result };\n        },\n      }),\n    ],\n  });\n}\n\n/**\n * Example 2: Session Management MCP Server\n *\n * In-process server for managing session state\n */\nexport function createSessionMcpServer(): McpSdkServerConfigWithInstance {\n  // In-process state (no IPC overhead!)\n  const sessions = new Map<string, { data: Record<string, any>; created: number }>();\n\n  return createSdkMcpServer({\n    name: 'session-manager',\n    version: '1.0.0',\n    tools: [\n      // Create session\n      tool({\n        name: 'session_create',\n        description: 'Create a new session with initial data',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n          data: z.record(z.any()).optional().describe('Initial session data'),\n        }),\n        execute: async ({ sessionId, data = {} }) => {\n          if (sessions.has(sessionId)) {\n            return { error: 'Session already exists' };\n          }\n\n          sessions.set(sessionId, {\n            data,\n            created: Date.now(),\n          });\n\n          return {\n            success: true,\n            sessionId,\n            created: sessions.get(sessionId)!.created,\n          };\n        },\n      }),\n\n      // Get session data\n      tool({\n        name: 'session_get',\n        description: 'Get session data by ID',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          const session = sessions.get(sessionId);\n\n          if (!session) {\n            return { error: 'Session not found' };\n          }\n\n          return {\n            sessionId,\n            data: session.data,\n            created: session.created,\n          };\n        },\n      }),\n\n      // Update session data\n      tool({\n        name: 'session_update',\n        description: 'Update session data (merges with existing)',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n          data: z.record(z.any()).describe('Data to merge'),\n        }),\n        execute: async ({ sessionId, data }) => {\n          const session = sessions.get(sessionId);\n\n          if (!session) {\n            return { error: 'Session not found' };\n          }\n\n          // Merge data\n          session.data = { ...session.data, ...data };\n\n          return {\n            success: true,\n            sessionId,\n            data: session.data,\n          };\n        },\n      }),\n\n      // Delete session\n      tool({\n        name: 'session_delete',\n        description: 'Delete a session',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          const existed = sessions.delete(sessionId);\n\n          return {\n            success: existed,\n            sessionId,\n          };\n        },\n      }),\n\n      // List all sessions\n      tool({\n        name: 'session_list',\n        description: 'List all active sessions',\n        parameters: z.object({}),\n        execute: async () => {\n          const sessionList = Array.from(sessions.entries()).map(([id, session]) => ({\n            sessionId: id,\n            created: session.created,\n            dataKeys: Object.keys(session.data),\n          }));\n\n          return {\n            sessions: sessionList,\n            count: sessionList.length,\n          };\n        },\n      }),\n    ],\n  });\n}\n\n/**\n * Example 3: Checkpoint Management MCP Server\n *\n * In-process server integrated with checkpoint manager\n */\nexport function createCheckpointMcpServer(): McpSdkServerConfigWithInstance {\n  // Import checkpoint manager\n  const { checkpointManager } = require('./checkpoint-manager');\n\n  return createSdkMcpServer({\n    name: 'checkpoint-manager',\n    version: '1.0.0',\n    tools: [\n      // Create checkpoint\n      tool({\n        name: 'checkpoint_create',\n        description: 'Create a checkpoint for a session',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n          description: z.string().describe('Checkpoint description'),\n        }),\n        execute: async ({ sessionId, description }) => {\n          try {\n            const checkpointId = await checkpointManager.createCheckpoint(\n              sessionId,\n              description\n            );\n\n            return {\n              success: true,\n              checkpointId,\n              description,\n            };\n          } catch (error) {\n            return {\n              success: false,\n              error: error instanceof Error ? error.message : String(error),\n            };\n          }\n        },\n      }),\n\n      // List checkpoints\n      tool({\n        name: 'checkpoint_list',\n        description: 'List all checkpoints for a session',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          const checkpoints = checkpointManager.listCheckpoints(sessionId);\n\n          return {\n            sessionId,\n            checkpoints: checkpoints.map(c => ({\n              id: c.id,\n              description: c.description,\n              timestamp: c.timestamp,\n              messageCount: c.messageCount,\n              totalTokens: c.totalTokens,\n              filesModified: c.filesModified,\n            })),\n            count: checkpoints.length,\n          };\n        },\n      }),\n\n      // Get checkpoint info\n      tool({\n        name: 'checkpoint_get',\n        description: 'Get checkpoint details',\n        parameters: z.object({\n          checkpointId: z.string().describe('Checkpoint identifier'),\n        }),\n        execute: async ({ checkpointId }) => {\n          const checkpoint = checkpointManager.getCheckpoint(checkpointId);\n\n          if (!checkpoint) {\n            return { error: 'Checkpoint not found' };\n          }\n\n          return {\n            checkpoint: {\n              id: checkpoint.id,\n              sessionId: checkpoint.sessionId,\n              description: checkpoint.description,\n              timestamp: checkpoint.timestamp,\n              messageCount: checkpoint.messageCount,\n              totalTokens: checkpoint.totalTokens,\n              filesModified: checkpoint.filesModified,\n            },\n          };\n        },\n      }),\n\n      // Delete checkpoint\n      tool({\n        name: 'checkpoint_delete',\n        description: 'Delete a checkpoint',\n        parameters: z.object({\n          checkpointId: z.string().describe('Checkpoint identifier'),\n        }),\n        execute: async ({ checkpointId }) => {\n          try {\n            await checkpointManager.deleteCheckpoint(checkpointId);\n\n            return {\n              success: true,\n              checkpointId,\n            };\n          } catch (error) {\n            return {\n              success: false,\n              error: error instanceof Error ? error.message : String(error),\n            };\n          }\n        },\n      }),\n\n      // Compare checkpoints\n      tool({\n        name: 'checkpoint_diff',\n        description: 'Compare two checkpoints',\n        parameters: z.object({\n          fromId: z.string().describe('From checkpoint ID'),\n          toId: z.string().describe('To checkpoint ID'),\n        }),\n        execute: async ({ fromId, toId }) => {\n          try {\n            const diff = checkpointManager.getCheckpointDiff(fromId, toId);\n\n            return {\n              success: true,\n              diff,\n            };\n          } catch (error) {\n            return {\n              success: false,\n              error: error instanceof Error ? error.message : String(error),\n            };\n          }\n        },\n      }),\n    ],\n  });\n}\n\n/**\n * Example 4: Query Control MCP Server\n *\n * In-process server for pause/resume operations\n */\nexport function createQueryControlMcpServer(): McpSdkServerConfigWithInstance {\n  const { queryController } = require('./query-control');\n\n  return createSdkMcpServer({\n    name: 'query-control',\n    version: '1.0.0',\n    tools: [\n      // Request pause\n      tool({\n        name: 'query_pause_request',\n        description: 'Request a query to pause at next safe point',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          queryController.requestPause(sessionId);\n\n          return {\n            success: true,\n            sessionId,\n            status: 'pause_requested',\n          };\n        },\n      }),\n\n      // Cancel pause request\n      tool({\n        name: 'query_pause_cancel',\n        description: 'Cancel a pause request',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          queryController.cancelPauseRequest(sessionId);\n\n          return {\n            success: true,\n            sessionId,\n            status: 'pause_cancelled',\n          };\n        },\n      }),\n\n      // List paused queries\n      tool({\n        name: 'query_paused_list',\n        description: 'List all paused queries',\n        parameters: z.object({}),\n        execute: async () => {\n          const paused = queryController.listPausedQueries();\n\n          return {\n            paused,\n            count: paused.length,\n          };\n        },\n      }),\n\n      // Get paused query state\n      tool({\n        name: 'query_paused_get',\n        description: 'Get paused query state',\n        parameters: z.object({\n          sessionId: z.string().describe('Session identifier'),\n        }),\n        execute: async ({ sessionId }) => {\n          const state = queryController.getPausedState(sessionId);\n\n          if (!state) {\n            return { error: 'Paused query not found' };\n          }\n\n          return {\n            sessionId,\n            pausePointMessageId: state.pausePointMessageId,\n            pausedAt: state.pausedAt,\n            messageCount: state.messages.length,\n          };\n        },\n      }),\n\n      // Get metrics\n      tool({\n        name: 'query_metrics',\n        description: 'Get query control metrics',\n        parameters: z.object({}),\n        execute: async () => {\n          const metrics = queryController.getMetrics();\n\n          return {\n            metrics: {\n              totalPauses: metrics.totalPauses,\n              totalResumes: metrics.totalResumes,\n              averagePauseDuration: metrics.averagePauseDuration,\n              longestPause: metrics.longestPause,\n            },\n          };\n        },\n      }),\n    ],\n  });\n}\n\n/**\n * Example Usage:\n *\n * ```typescript\n * import { query } from '@anthropic-ai/claude-code';\n * import {\n *   createMathMcpServer,\n *   createSessionMcpServer,\n *   createCheckpointMcpServer,\n *   createQueryControlMcpServer,\n * } from './in-process-mcp';\n *\n * // Use in-process MCP servers (no IPC overhead!)\n * const result = await query({\n *   prompt: 'Calculate 5! and store result in session',\n *   options: {\n *     mcpServers: {\n *       math: createMathMcpServer(),\n *       session: createSessionMcpServer(),\n *       checkpoint: createCheckpointMcpServer(),\n *       queryControl: createQueryControlMcpServer(),\n *     },\n *   },\n * });\n * ```\n */\n\n// Export all server factories\nexport {\n  createMathMcpServer,\n  createSessionMcpServer,\n  createCheckpointMcpServer,\n  createQueryControlMcpServer,\n};\n"],"names":["createSdkMcpServer","tool","z","createMathMcpServer","name","version","tools","description","parameters","object","a","number","describe","b","execute","result","n","int","min","i","createSessionMcpServer","sessions","Map","sessionId","string","data","record","any","optional","has","error","set","created","Date","now","success","get","session","existed","delete","sessionList","Array","from","entries","map","id","dataKeys","Object","keys","count","length","createCheckpointMcpServer","checkpointManager","require","checkpointId","createCheckpoint","Error","message","String","checkpoints","listCheckpoints","c","timestamp","messageCount","totalTokens","filesModified","checkpoint","getCheckpoint","deleteCheckpoint","fromId","toId","diff","getCheckpointDiff","createQueryControlMcpServer","queryController","requestPause","status","cancelPauseRequest","paused","listPausedQueries","state","getPausedState","pausePointMessageId","pausedAt","messages","metrics","getMetrics","totalPauses","totalResumes","averagePauseDuration","longestPause"],"mappings":"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"}