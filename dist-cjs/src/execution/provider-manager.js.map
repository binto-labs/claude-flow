{"version":3,"sources":["../../../src/execution/provider-manager.ts"],"sourcesContent":["/**\n * Provider Manager - Handles multi-provider configuration and selection\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport os from 'os';\n\nexport interface ProviderConfig {\n  name: 'anthropic' | 'openrouter' | 'onnx' | 'gemini';\n  model?: string;\n  apiKey?: string;\n  enabled: boolean;\n  priority?: 'cost' | 'quality' | 'speed' | 'privacy';\n}\n\nexport interface ExecutionConfig {\n  defaultProvider: string;\n  providers: Record<string, ProviderConfig>;\n  optimization?: {\n    strategy: 'balanced' | 'cost' | 'quality' | 'speed' | 'privacy';\n    maxCostPerTask?: number;\n  };\n}\n\nexport class ProviderManager {\n  private config: ExecutionConfig;\n  private configPath: string;\n\n  constructor() {\n    this.configPath = path.join(os.homedir(), '.claude', 'settings.json');\n    this.config = this.loadConfig();\n  }\n\n  /**\n   * Get default provider\n   */\n  getDefaultProvider(): string {\n    return this.config.defaultProvider || 'anthropic';\n  }\n\n  /**\n   * Get provider configuration\n   */\n  getProviderConfig(provider: string): ProviderConfig | null {\n    return this.config.providers?.[provider] || null;\n  }\n\n  /**\n   * Set default provider\n   */\n  async setDefaultProvider(provider: string): Promise<void> {\n    this.config.defaultProvider = provider;\n    await this.saveConfig();\n  }\n\n  /**\n   * Configure a provider\n   */\n  async configureProvider(\n    provider: string,\n    config: Partial<ProviderConfig>\n  ): Promise<void> {\n    if (!this.config.providers) {\n      this.config.providers = {};\n    }\n\n    this.config.providers[provider] = {\n      ...this.config.providers[provider],\n      name: provider as any,\n      ...config,\n    };\n\n    await this.saveConfig();\n  }\n\n  /**\n   * List available providers\n   */\n  listProviders(): ProviderConfig[] {\n    if (!this.config.providers) {\n      return this.getDefaultProviders();\n    }\n\n    return Object.values(this.config.providers);\n  }\n\n  /**\n   * Get optimization strategy\n   */\n  getOptimizationStrategy(): string {\n    return this.config.optimization?.strategy || 'balanced';\n  }\n\n  /**\n   * Load configuration from file\n   */\n  private loadConfig(): ExecutionConfig {\n    try {\n      if (fs.existsSync(this.configPath)) {\n        const data = fs.readFileSync(this.configPath, 'utf-8');\n        const settings = JSON.parse(data);\n        return settings['claude-flow']?.execution || this.getDefaultConfig();\n      }\n    } catch (error) {\n      console.warn('Failed to load provider config, using defaults');\n    }\n\n    return this.getDefaultConfig();\n  }\n\n  /**\n   * Save configuration to file\n   */\n  private async saveConfig(): Promise<void> {\n    try {\n      await fs.ensureDir(path.dirname(this.configPath));\n\n      let settings: any = {};\n      if (await fs.pathExists(this.configPath)) {\n        const data = await fs.readFile(this.configPath, 'utf-8');\n        settings = JSON.parse(data);\n      }\n\n      if (!settings['claude-flow']) {\n        settings['claude-flow'] = {};\n      }\n\n      settings['claude-flow'].execution = this.config;\n\n      await fs.writeFile(\n        this.configPath,\n        JSON.stringify(settings, null, 2),\n        'utf-8'\n      );\n    } catch (error: any) {\n      console.error('Failed to save provider config:', error.message);\n    }\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(): ExecutionConfig {\n    return {\n      defaultProvider: 'anthropic',\n      providers: {\n        anthropic: {\n          name: 'anthropic',\n          model: 'claude-sonnet-4-5-20250929',\n          enabled: true,\n          priority: 'quality',\n        },\n        openrouter: {\n          name: 'openrouter',\n          model: 'meta-llama/llama-3.1-8b-instruct',\n          enabled: true,\n          priority: 'cost',\n        },\n        onnx: {\n          name: 'onnx',\n          model: 'Xenova/gpt2',\n          enabled: true,\n          priority: 'privacy',\n        },\n        gemini: {\n          name: 'gemini',\n          enabled: true,\n          priority: 'cost',\n        },\n      },\n      optimization: {\n        strategy: 'balanced',\n        maxCostPerTask: 0.5,\n      },\n    };\n  }\n\n  /**\n   * Get default providers list\n   */\n  private getDefaultProviders(): ProviderConfig[] {\n    return Object.values(this.getDefaultConfig().providers);\n  }\n}\n\nexport default ProviderManager;\n"],"names":["fs","path","os","ProviderManager","config","configPath","join","homedir","loadConfig","getDefaultProvider","defaultProvider","getProviderConfig","provider","providers","setDefaultProvider","saveConfig","configureProvider","name","listProviders","getDefaultProviders","Object","values","getOptimizationStrategy","optimization","strategy","existsSync","data","readFileSync","settings","JSON","parse","execution","getDefaultConfig","error","console","warn","ensureDir","dirname","pathExists","readFile","writeFile","stringify","message","anthropic","model","enabled","priority","openrouter","onnx","gemini","maxCostPerTask"],"mappings":"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"}