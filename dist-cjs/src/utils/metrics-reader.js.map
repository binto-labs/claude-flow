{"version":3,"sources":["../../../src/utils/metrics-reader.js"],"sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nclass MetricsReader {\n  constructor() {\n    this.metricsDir = '.claude-flow/metrics';\n    this.sessionsDir = '.claude-flow/sessions';\n  }\n\n  async getSystemMetrics() {\n    try {\n      const filePath = path.join(this.metricsDir, 'system-metrics.json');\n      const content = await fs.readFile(filePath, 'utf8');\n      const metrics = JSON.parse(content);\n      \n      // Return the most recent metric\n      return metrics.length > 0 ? metrics[metrics.length - 1] : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getTaskQueue() {\n    try {\n      const queueFile = '.claude-flow/tasks/queue.json';\n      const content = await fs.readFile(queueFile, 'utf8');\n      return JSON.parse(content);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getTaskMetrics() {\n    try {\n      const filePath = path.join(this.metricsDir, 'task-metrics.json');\n      const content = await fs.readFile(filePath, 'utf8');\n      return JSON.parse(content);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getPerformanceMetrics() {\n    try {\n      const filePath = path.join(this.metricsDir, 'performance.json');\n      const content = await fs.readFile(filePath, 'utf8');\n      return JSON.parse(content);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getActiveAgents() {\n    try {\n      const agents = [];\n      \n      // Check for agents in the .claude-flow/agents directory\n      const agentsDir = '.claude-flow/agents';\n      try {\n        const agentFiles = await fs.readdir(agentsDir);\n        for (const file of agentFiles) {\n          if (file.endsWith('.json')) {\n            try {\n              const content = await fs.readFile(path.join(agentsDir, file), 'utf8');\n              const agent = JSON.parse(content);\n              agents.push(agent);\n            } catch {\n              // Skip invalid agent files\n            }\n          }\n        }\n      } catch {\n        // Agents directory doesn't exist yet\n      }\n      \n      // If no agents found in directory, check session files\n      if (agents.length === 0) {\n        const sessionFiles = await this.getSessionFiles();\n        for (const file of sessionFiles) {\n          try {\n            const content = await fs.readFile(path.join(this.sessionsDir, 'pair', file), 'utf8');\n            const sessionData = JSON.parse(content);\n            \n            if (sessionData.agents && Array.isArray(sessionData.agents)) {\n              agents.push(...sessionData.agents);\n            }\n          } catch {\n            // Skip invalid session files\n          }\n        }\n      }\n      \n      return agents;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getSessionStatus() {\n    try {\n      const sessionFiles = await this.getSessionFiles();\n      \n      if (sessionFiles.length === 0) {\n        return null;\n      }\n      \n      // Get the most recent session\n      const mostRecentFile = sessionFiles[sessionFiles.length - 1];\n      const content = await fs.readFile(path.join(this.sessionsDir, 'pair', mostRecentFile), 'utf8');\n      return JSON.parse(content);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async getRecentTasks(limit = 10) {\n    try {\n      const taskMetrics = await this.getTaskMetrics();\n      \n      // Sort by timestamp descending and take the limit\n      return taskMetrics\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .slice(0, limit)\n        .map(task => ({\n          id: task.id,\n          type: task.type,\n          status: task.success ? 'completed' : 'failed',\n          startTime: task.timestamp - task.duration,\n          endTime: task.timestamp,\n          duration: task.duration\n        }));\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getOverallHealth() {\n    try {\n      const systemMetrics = await this.getSystemMetrics();\n      const perfMetrics = await this.getPerformanceMetrics();\n      \n      if (!systemMetrics && !perfMetrics) {\n        return 'error';\n      }\n      \n      // Check memory usage\n      if (systemMetrics && systemMetrics.memoryUsagePercent > 90) {\n        return 'error';\n      }\n      \n      if (systemMetrics && systemMetrics.memoryUsagePercent > 75) {\n        return 'warning';\n      }\n      \n      // Check CPU load\n      if (systemMetrics && systemMetrics.cpuLoad > 0.8) {\n        return 'warning';\n      }\n      \n      // Check task failure rate\n      if (perfMetrics && perfMetrics.totalTasks > 0) {\n        const failureRate = perfMetrics.failedTasks / perfMetrics.totalTasks;\n        if (failureRate > 0.5) {\n          return 'error';\n        }\n        if (failureRate > 0.2) {\n          return 'warning';\n        }\n      }\n      \n      return 'healthy';\n    } catch (error) {\n      return 'error';\n    }\n  }\n\n  async getSessionFiles() {\n    try {\n      const files = await fs.readdir(path.join(this.sessionsDir, 'pair'));\n      return files.filter(f => f.endsWith('.json')).sort();\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getMCPServerStatus() {\n    try {\n      // Check if MCP server process is running (including flow-nexus and other MCP variants)\n      const { stdout } = await execAsync('ps aux | grep -E \"mcp\" | grep -v grep | wc -l');\n      const processCount = parseInt(stdout.trim(), 10);\n      \n      // Check for orchestrator running\n      const { stdout: orchestratorOut } = await execAsync('ps aux | grep -E \"claude-flow start\" | grep -v grep | wc -l');\n      const orchestratorRunning = parseInt(orchestratorOut.trim(), 10) > 0;\n      \n      // Determine status\n      const isRunning = processCount > 0;\n      \n      // Try to get port from process (default is 3000)\n      let port = 3000;\n      try {\n        const { stdout: portOut } = await execAsync('lsof -i :3000 2>/dev/null | grep LISTEN | wc -l');\n        if (parseInt(portOut.trim(), 10) === 0) {\n          // If port 3000 not listening, check other common ports\n          port = null;\n        }\n      } catch {\n        // lsof might not be available or port not in use\n      }\n      \n      return {\n        running: isRunning,\n        processCount,\n        orchestratorRunning,\n        port,\n        connections: processCount > 0 ? Math.max(1, processCount - 1) : 0 // Estimate connections\n      };\n    } catch (error) {\n      // Fallback if commands fail\n      return {\n        running: false,\n        processCount: 0,\n        orchestratorRunning: false,\n        port: null,\n        connections: 0\n      };\n    }\n  }\n}\n\nexport { MetricsReader };"],"names":["promises","fs","path","exec","promisify","execAsync","MetricsReader","metricsDir","sessionsDir","getSystemMetrics","filePath","join","content","readFile","metrics","JSON","parse","length","error","getTaskQueue","queueFile","getTaskMetrics","getPerformanceMetrics","getActiveAgents","agents","agentsDir","agentFiles","readdir","file","endsWith","agent","push","sessionFiles","getSessionFiles","sessionData","Array","isArray","getSessionStatus","mostRecentFile","getRecentTasks","limit","taskMetrics","sort","a","b","timestamp","slice","map","task","id","type","status","success","startTime","duration","endTime","getOverallHealth","systemMetrics","perfMetrics","memoryUsagePercent","cpuLoad","totalTasks","failureRate","failedTasks","files","filter","f","getMCPServerStatus","stdout","processCount","parseInt","trim","orchestratorOut","orchestratorRunning","isRunning","port","portOut","running","connections","Math","max"],"mappings":"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"}AG,KAAK;gBAChD,OAAO;YACT;YAGA,IAAIzC,eAAeA,YAAY0C,UAAU,GAAG,GAAG;gBAC7C,MAAMC,cAAc3C,YAAY4C,WAAW,GAAG5C,YAAY0C,UAAU;gBACpE,IAAIC,cAAc,KAAK;oBACrB,OAAO;gBACT;gBACA,IAAIA,cAAc,KAAK;oBACrB,OAAO;gBACT;YACF;YAEA,OAAO;QACT,EAAE,OAAO/C,OAAO;YACd,OAAO;QACT;IACF;IAEA,MAAcM,kBAAqC;QACjD,IAAI;YACF,MAAM2C,QAAQ,MAAMlE,GAAGmE,OAAO,CAAClE,KAAKS,IAAI,CAAC,IAAI,CAACH,WAAW,EAAE;YAC3D,OAAO2D,MAAME,MAAM,CAACC,CAAAA,IAAKA,EAAEC,QAAQ,CAAC,UAAUtB,IAAI;QACpD,EAAE,OAAO/B,OAAO;YACd,OAAO,EAAE;QACX;IACF;IAEA,MAAMsD,qBAA+C;QACnD,IAAI;YAEF,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMpE,UAAU;YACnC,MAAMqE,eAAeC,SAASF,OAAOG,IAAI,IAAI;YAG7C,MAAM,EAAEH,QAAQI,eAAe,EAAE,GAAG,MAAMxE,UAAU;YACpD,MAAMyE,sBAAsBH,SAASE,gBAAgBD,IAAI,IAAI,MAAM;YAGnE,MAAMG,YAAYL,eAAe;YAGjC,IAAIM,OAAsB;YAC1B,IAAI;gBACF,MAAM,EAAEP,QAAQQ,OAAO,EAAE,GAAG,MAAM5E,UAAU;gBAC5C,IAAIsE,SAASM,QAAQL,IAAI,IAAI,QAAQ,GAAG;oBAEtCI,OAAO;gBACT;YACF,EAAE,OAAM,CAER;YAEA,OAAO;gBACLE,SAASH;gBACTL;gBACAI;gBACAE;gBACAG,aAAaT,eAAe,IAAIU,KAAKC,GAAG,CAAC,GAAGX,eAAe,KAAK;YAClE;QACF,EAAE,OAAOxD,OAAO;YAEd,OAAO;gBACLgE,SAAS;gBACTR,cAAc;gBACdI,qBAAqB;gBACrBE,MAAM;gBACNG,aAAa;YACf;QACF;IACF;AACF"}