{"version":3,"sources":["../../../../src/cli/simple-commands/memory.js"],"sourcesContent":["// memory.js - Memory management commands\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport { getUnifiedMemory } from '../../memory/unified-memory-manager.js';\nimport { KeyRedactor } from '../../utils/key-redactor.js';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport async function memoryCommand(subArgs, flags) {\n  const memorySubcommand = subArgs[0];\n  const memoryStore = './memory/memory-store.json';\n\n  // Extract namespace from flags or subArgs\n  const namespace = flags?.namespace || flags?.ns || getNamespaceFromArgs(subArgs) || 'default';\n\n  // Check for redaction flag\n  const enableRedaction = flags?.redact || subArgs.includes('--redact') || subArgs.includes('--secure');\n\n  // NEW: Detect memory mode (basic, reasoningbank, auto)\n  const mode = await detectMemoryMode(flags, subArgs);\n\n  // Helper to load memory data\n  async function loadMemory() {\n    try {\n      const content = await fs.readFile(memoryStore, 'utf8');\n      return JSON.parse(content);\n    } catch {\n      return {};\n    }\n  }\n\n  // Helper to save memory data\n  async function saveMemory(data) {\n    await fs.mkdir('./memory', { recursive: true });\n    await fs.writeFile(memoryStore, JSON.stringify(data, null, 2, 'utf8'));\n  }\n\n  // NEW: Handle ReasoningBank-specific commands\n  if (mode === 'reasoningbank' && ['init', 'status', 'consolidate', 'demo', 'test', 'benchmark'].includes(memorySubcommand)) {\n    return await handleReasoningBankCommand(memorySubcommand, subArgs, flags);\n  }\n\n  // NEW: Handle new mode management commands\n  if (['detect', 'mode', 'migrate'].includes(memorySubcommand)) {\n    return await handleModeCommand(memorySubcommand, subArgs, flags);\n  }\n\n  // NEW: Delegate to ReasoningBank for regular commands if mode is set\n  if (mode === 'reasoningbank' && ['store', 'query', 'list'].includes(memorySubcommand)) {\n    return await handleReasoningBankCommand(memorySubcommand, subArgs, flags);\n  }\n\n  switch (memorySubcommand) {\n    case 'store':\n      await storeMemory(subArgs, loadMemory, saveMemory, namespace, enableRedaction);\n      break;\n\n    case 'query':\n      await queryMemory(subArgs, loadMemory, namespace, enableRedaction);\n      break;\n\n    case 'stats':\n      await showMemoryStats(loadMemory);\n      break;\n\n    case 'export':\n      await exportMemory(subArgs, loadMemory, namespace);\n      break;\n\n    case 'import':\n      await importMemory(subArgs, saveMemory, loadMemory);\n      break;\n\n    case 'clear':\n      await clearMemory(subArgs, saveMemory, namespace);\n      break;\n\n    case 'list':\n      await listNamespaces(loadMemory);\n      break;\n\n    default:\n      showMemoryHelp();\n  }\n}\n\nasync function storeMemory(subArgs, loadMemory, saveMemory, namespace, enableRedaction = false) {\n  const key = subArgs[1];\n  let value = subArgs.slice(2).join(' ');\n\n  if (!key || !value) {\n    printError('Usage: memory store <key> <value> [--namespace <ns>] [--redact]');\n    return;\n  }\n\n  try {\n    // Apply redaction if enabled\n    let redactedValue = value;\n    let securityWarnings = [];\n\n    if (enableRedaction) {\n      redactedValue = KeyRedactor.redact(value, true);\n      const validation = KeyRedactor.validate(value);\n\n      if (!validation.safe) {\n        securityWarnings = validation.warnings;\n        printWarning('üîí Redaction enabled: Sensitive data detected and redacted');\n        securityWarnings.forEach(warning => console.log(`   ‚ö†Ô∏è  ${warning}`));\n      }\n    } else {\n      // Even if redaction is not explicitly enabled, validate and warn\n      const validation = KeyRedactor.validate(value);\n      if (!validation.safe) {\n        printWarning('‚ö†Ô∏è  Potential sensitive data detected! Use --redact flag for automatic redaction');\n        validation.warnings.forEach(warning => console.log(`   ‚ö†Ô∏è  ${warning}`));\n        console.log('   üí° Tip: Add --redact flag to automatically redact API keys');\n      }\n    }\n\n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      data[namespace] = [];\n    }\n\n    // Remove existing entry with same key\n    data[namespace] = data[namespace].filter((e) => e.key !== key);\n\n    // Add new entry with redacted value\n    data[namespace].push({\n      key,\n      value: redactedValue,\n      namespace,\n      timestamp: Date.now(),\n      redacted: enableRedaction && securityWarnings.length > 0,\n    });\n\n    await saveMemory(data);\n    printSuccess(enableRedaction && securityWarnings.length > 0 ? 'üîí Stored successfully (with redaction)' : '‚úÖ Stored successfully');\n    console.log(`üìù Key: ${key}`);\n    console.log(`üì¶ Namespace: ${namespace}`);\n    console.log(`üíæ Size: ${new TextEncoder().encode(redactedValue).length} bytes`);\n    if (enableRedaction && securityWarnings.length > 0) {\n      console.log(`üîí Security: ${securityWarnings.length} sensitive pattern(s) redacted`);\n    }\n  } catch (err) {\n    printError(`Failed to store: ${err.message}`);\n  }\n}\n\nasync function queryMemory(subArgs, loadMemory, namespace, enableRedaction = false) {\n  const search = subArgs.slice(1).join(' ');\n\n  if (!search) {\n    printError('Usage: memory query <search> [--namespace <ns>] [--redact]');\n    return;\n  }\n\n  try {\n    const data = await loadMemory();\n    const results = [];\n\n    for (const [ns, entries] of Object.entries(data)) {\n      if (namespace && ns !== namespace) continue;\n\n      for (const entry of entries) {\n        if (entry.key.includes(search) || entry.value.includes(search)) {\n          results.push(entry);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      printWarning('No results found');\n      return;\n    }\n\n    printSuccess(`Found ${results.length} results:`);\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp - a.timestamp);\n\n    for (const entry of results.slice(0, 10)) {\n      console.log(`\\nüìå ${entry.key}`);\n      console.log(`   Namespace: ${entry.namespace}`);\n\n      // Apply redaction to displayed value if requested\n      let displayValue = entry.value;\n      if (enableRedaction) {\n        displayValue = KeyRedactor.redact(displayValue, true);\n      }\n\n      console.log(\n        `   Value: ${displayValue.substring(0, 100)}${displayValue.length > 100 ? '...' : ''}`,\n      );\n      console.log(`   Stored: ${new Date(entry.timestamp).toLocaleString()}`);\n\n      // Show redaction status\n      if (entry.redacted) {\n        console.log(`   üîí Status: Redacted on storage`);\n      } else if (enableRedaction) {\n        console.log(`   üîí Status: Redacted for display`);\n      }\n    }\n\n    if (results.length > 10) {\n      console.log(`\\n... and ${results.length - 10} more results`);\n    }\n  } catch (err) {\n    printError(`Failed to query: ${err.message}`);\n  }\n}\n\nasync function showMemoryStats(loadMemory) {\n  try {\n    const data = await loadMemory();\n    let totalEntries = 0;\n    const namespaceStats = {};\n\n    for (const [namespace, entries] of Object.entries(data)) {\n      namespaceStats[namespace] = entries.length;\n      totalEntries += entries.length;\n    }\n\n    printSuccess('Memory Bank Statistics:');\n    console.log(`   Total Entries: ${totalEntries}`);\n    console.log(`   Namespaces: ${Object.keys(data).length}`);\n    console.log(\n      `   Size: ${(new TextEncoder().encode(JSON.stringify(data)).length / 1024).toFixed(2)} KB`,\n    );\n\n    if (Object.keys(data).length > 0) {\n      console.log('\\nüìÅ Namespace Breakdown:');\n      for (const [namespace, count] of Object.entries(namespaceStats)) {\n        console.log(`   ${namespace}: ${count} entries`);\n      }\n    }\n  } catch (err) {\n    printError(`Failed to get stats: ${err.message}`);\n  }\n}\n\nasync function exportMemory(subArgs, loadMemory, namespace) {\n  const filename = subArgs[1] || `memory-export-${Date.now()}.json`;\n\n  try {\n    const data = await loadMemory();\n\n    let exportData = data;\n    if (namespace) {\n      exportData = { [namespace]: data[namespace] || [] };\n    }\n\n    await fs.writeFile(filename, JSON.stringify(exportData, null, 2, 'utf8'));\n    printSuccess(`Memory exported to ${filename}`);\n\n    let totalEntries = 0;\n    for (const entries of Object.values(exportData)) {\n      totalEntries += entries.length;\n    }\n    console.log(\n      `üì¶ Exported ${totalEntries} entries from ${Object.keys(exportData).length} namespace(s)`,\n    );\n  } catch (err) {\n    printError(`Failed to export memory: ${err.message}`);\n  }\n}\n\nasync function importMemory(subArgs, saveMemory, loadMemory) {\n  const filename = subArgs[1];\n\n  if (!filename) {\n    printError('Usage: memory import <filename>');\n    return;\n  }\n\n  try {\n    const importContent = await fs.readFile(filename, 'utf8');\n    const importData = JSON.parse(importContent);\n\n    // Load existing memory\n    const existingData = await loadMemory();\n\n    // Merge imported data\n    let totalImported = 0;\n    for (const [namespace, entries] of Object.entries(importData)) {\n      if (!existingData[namespace]) {\n        existingData[namespace] = [];\n      }\n\n      // Add entries that don't already exist (by key)\n      const existingKeys = new Set(existingData[namespace].map((e) => e.key));\n      const newEntries = entries.filter((e) => !existingKeys.has(e.key));\n\n      existingData[namespace].push(...newEntries);\n      totalImported += newEntries.length;\n    }\n\n    await saveMemory(existingData);\n    printSuccess(`Imported ${totalImported} new entries from ${filename}`);\n  } catch (err) {\n    printError(`Failed to import memory: ${err.message}`);\n  }\n}\n\nasync function clearMemory(subArgs, saveMemory, namespace) {\n  if (!namespace || namespace === 'default') {\n    const nsFromArgs = getNamespaceFromArgs(subArgs);\n    if (!nsFromArgs) {\n      printError('Usage: memory clear --namespace <namespace>');\n      printWarning('This will clear all entries in the specified namespace');\n      return;\n    }\n    namespace = nsFromArgs;\n  }\n\n  try {\n    // Helper to load memory data\n    async function loadMemory() {\n      try {\n        const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n        return JSON.parse(content);\n      } catch {\n        return {};\n      }\n    }\n    \n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      printWarning(`Namespace '${namespace}' does not exist`);\n      return;\n    }\n\n    const entryCount = data[namespace].length;\n    delete data[namespace];\n\n    await saveMemory(data);\n    printSuccess(`Cleared ${entryCount} entries from namespace '${namespace}'`);\n  } catch (err) {\n    printError(`Failed to clear memory: ${err.message}`);\n  }\n}\n\nasync function listNamespaces(loadMemory) {\n  try {\n    const data = await loadMemory();\n    const namespaces = Object.keys(data);\n\n    if (namespaces.length === 0) {\n      printWarning('No namespaces found');\n      return;\n    }\n\n    printSuccess('Available namespaces:');\n    for (const namespace of namespaces) {\n      const count = data[namespace].length;\n      console.log(`  ${namespace} (${count} entries)`);\n    }\n  } catch (err) {\n    printError(`Failed to list namespaces: ${err.message}`);\n  }\n}\n\nfunction getNamespaceFromArgs(subArgs) {\n  const namespaceIndex = subArgs.indexOf('--namespace');\n  if (namespaceIndex !== -1 && namespaceIndex + 1 < subArgs.length) {\n    return subArgs[namespaceIndex + 1];\n  }\n\n  const nsIndex = subArgs.indexOf('--ns');\n  if (nsIndex !== -1 && nsIndex + 1 < subArgs.length) {\n    return subArgs[nsIndex + 1];\n  }\n\n  return null;\n}\n\n// Helper to load memory data (needed for import function)\nasync function loadMemory() {\n  try {\n    const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n    return JSON.parse(content);\n  } catch {\n    return {};\n  }\n}\n\n// NEW: Mode detection function\nasync function detectMemoryMode(flags, subArgs) {\n  // Explicit ReasoningBank flag takes precedence\n  if (flags?.reasoningbank || flags?.rb || subArgs.includes('--reasoningbank') || subArgs.includes('--rb')) {\n    return 'reasoningbank';\n  }\n\n  // Auto mode: detect if ReasoningBank is initialized\n  if (flags?.auto || subArgs.includes('--auto')) {\n    const initialized = await isReasoningBankInitialized();\n    return initialized ? 'reasoningbank' : 'basic';\n  }\n\n  // Explicit basic mode flag\n  if (flags?.basic || subArgs.includes('--basic')) {\n    return 'basic';\n  }\n\n  // Default: AUTO MODE (smart selection with JSON fallback)\n  // Automatically use ReasoningBank if initialized, otherwise fall back to basic mode\n  const initialized = await isReasoningBankInitialized();\n  return initialized ? 'reasoningbank' : 'basic';\n}\n\n// NEW: Check if ReasoningBank is initialized\nasync function isReasoningBankInitialized() {\n  try {\n    // Check if .swarm/memory.db exists\n    const dbPath = '.swarm/memory.db';\n    await fs.access(dbPath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// NEW: Handle ReasoningBank commands\nasync function handleReasoningBankCommand(command, subArgs, flags) {\n  const initialized = await isReasoningBankInitialized();\n\n  // Lazy load the adapter (ES modules)\n  const { initializeReasoningBank, storeMemory, queryMemories, listMemories, getStatus, checkReasoningBankTables, migrateReasoningBank, cleanup } = await import('../../reasoningbank/reasoningbank-adapter.js');\n\n  // Special handling for 'init' command\n  if (command === 'init') {\n    const dbPath = '.swarm/memory.db';\n\n    if (initialized) {\n      // Database exists - check if migration is needed\n      printInfo('üîç Checking existing database for ReasoningBank schema...\\n');\n\n      try {\n        // Set the database path for ReasoningBank\n        process.env.CLAUDE_FLOW_DB_PATH = dbPath;\n\n        const tableCheck = await checkReasoningBankTables();\n\n        if (tableCheck.exists) {\n          printSuccess('‚úÖ ReasoningBank already complete');\n          console.log('Database: .swarm/memory.db');\n          console.log('All ReasoningBank tables present\\n');\n          console.log('Use --reasoningbank flag with memory commands to enable AI features');\n          return;\n        }\n\n        // Missing tables found - run migration\n        console.log(`üîÑ Migrating database: ${tableCheck.missingTables.length} tables missing`);\n        console.log(`   Missing: ${tableCheck.missingTables.join(', ')}\\n`);\n\n        const migrationResult = await migrateReasoningBank();\n\n        if (migrationResult.success) {\n          printSuccess(`‚úì Migration complete: added ${migrationResult.addedTables?.length || 0} tables`);\n          console.log('\\nNext steps:');\n          console.log('  1. Store memories: memory store key \"value\" --reasoningbank');\n          console.log('  2. Query memories: memory query \"search\" --reasoningbank');\n          console.log('  3. Check status: memory status --reasoningbank');\n        } else {\n          printError(`‚ùå Migration failed: ${migrationResult.message}`);\n          console.log('Try running: init --force to reinitialize');\n        }\n      } catch (error) {\n        printError('‚ùå Migration check failed');\n        console.error(error.message);\n        console.log('\\nTry running: init --force to reinitialize');\n      } finally {\n        // Cleanup after migration check\n        cleanup();\n        // Force exit to prevent hanging from embedding cache timers\n        setTimeout(() => process.exit(0), 100);\n      }\n      return;\n    }\n\n    // Fresh initialization\n    printInfo('üß† Initializing ReasoningBank...');\n    console.log('This will create: .swarm/memory.db\\n');\n\n    try {\n      await initializeReasoningBank();\n      printSuccess('‚úÖ ReasoningBank initialized successfully!');\n      console.log('\\nNext steps:');\n      console.log('  1. Store memories: memory store key \"value\" --reasoningbank');\n      console.log('  2. Query memories: memory query \"search\" --reasoningbank');\n      console.log('  3. Check status: memory status --reasoningbank');\n    } catch (error) {\n      printError('‚ùå Failed to initialize ReasoningBank');\n      console.error(error.message);\n    } finally {\n      // Cleanup after init\n      cleanup();\n      // Force exit to prevent hanging from embedding cache timers\n      setTimeout(() => process.exit(0), 100);\n    }\n    return;\n  }\n\n  // All other commands require initialization\n  if (!initialized) {\n    printError('‚ùå ReasoningBank not initialized');\n    console.log('\\nTo use ReasoningBank mode, first run:');\n    console.log('  memory init --reasoningbank\\n');\n    return;\n  }\n\n  printInfo(`üß† Using ReasoningBank mode...`);\n\n  try {\n    // Handle different commands\n    switch (command) {\n      case 'store':\n        await handleReasoningBankStore(subArgs, flags, storeMemory);\n        break;\n\n      case 'query':\n        await handleReasoningBankQuery(subArgs, flags, queryMemories);\n        break;\n\n      case 'list':\n        await handleReasoningBankList(subArgs, flags, listMemories);\n        break;\n\n      case 'status':\n        await handleReasoningBankStatus(getStatus);\n        break;\n\n      case 'consolidate':\n      case 'demo':\n      case 'test':\n      case 'benchmark':\n        // These still use CLI commands\n        const cmd = `npx agentic-flow reasoningbank ${command}`;\n        const { stdout } = await execAsync(cmd, { timeout: 60000 });\n        if (stdout) console.log(stdout);\n        break;\n\n      default:\n        printError(`Unknown ReasoningBank command: ${command}`);\n    }\n  } catch (error) {\n    printError(`‚ùå ReasoningBank command failed`);\n    console.error(error.message);\n  } finally {\n    // Always cleanup database connection\n    cleanup();\n\n    // Force process exit after cleanup (embedding cache timers prevent natural exit)\n    // This is necessary because agentic-flow's embedding cache uses setTimeout\n    // which keeps the event loop alive\n    setTimeout(() => {\n      process.exit(0);\n    }, 100);\n  }\n}\n\n// NEW: Handle ReasoningBank store\nasync function handleReasoningBankStore(subArgs, flags, storeMemory) {\n  const key = subArgs[1];\n  const value = subArgs.slice(2).join(' ');\n\n  if (!key || !value) {\n    printError('Usage: memory store <key> <value> --reasoningbank');\n    return;\n  }\n\n  try {\n    const namespace = flags?.namespace || flags?.ns || getArgValue(subArgs, '--namespace') || 'default';\n\n    const memoryId = await storeMemory(key, value, {\n      namespace,\n      agent: 'memory-agent',\n      domain: namespace,\n    });\n\n    printSuccess('‚úÖ Stored successfully in ReasoningBank');\n    console.log(`üìù Key: ${key}`);\n    console.log(`üß† Memory ID: ${memoryId}`);\n    console.log(`üì¶ Namespace: ${namespace}`);\n    console.log(`üíæ Size: ${new TextEncoder().encode(value).length} bytes`);\n    console.log(`üîç Semantic search: enabled`);\n  } catch (error) {\n    printError(`Failed to store: ${error.message}`);\n  }\n}\n\n// NEW: Handle ReasoningBank query\nasync function handleReasoningBankQuery(subArgs, flags, queryMemories) {\n  const search = subArgs.slice(1).join(' ');\n\n  if (!search) {\n    printError('Usage: memory query <search> --reasoningbank');\n    return;\n  }\n\n  try {\n    const namespace = flags?.namespace || flags?.ns || getArgValue(subArgs, '--namespace');\n    const results = await queryMemories(search, {\n      domain: namespace || 'general',\n      limit: 10,\n    });\n\n    if (results.length === 0) {\n      printWarning('No results found');\n      return;\n    }\n\n    printSuccess(`Found ${results.length} results (semantic search):`);\n\n    for (const entry of results) {\n      console.log(`\\nüìå ${entry.key}`);\n      console.log(`   Namespace: ${entry.namespace}`);\n      console.log(`   Value: ${entry.value.substring(0, 100)}${entry.value.length > 100 ? '...' : ''}`);\n      console.log(`   Confidence: ${(entry.confidence * 100).toFixed(1)}%`);\n      console.log(`   Usage: ${entry.usage_count} times`);\n      if (entry.score) {\n        console.log(`   Match Score: ${(entry.score * 100).toFixed(1)}%`);\n      }\n      console.log(`   Stored: ${new Date(entry.created_at).toLocaleString()}`);\n    }\n  } catch (error) {\n    printError(`Failed to query: ${error.message}`);\n  }\n}\n\n// NEW: Handle ReasoningBank list\nasync function handleReasoningBankList(subArgs, flags, listMemories) {\n  try {\n    const sort = flags?.sort || getArgValue(subArgs, '--sort') || 'created_at';\n    const limit = parseInt(flags?.limit || getArgValue(subArgs, '--limit') || '10');\n\n    const results = await listMemories({ sort, limit });\n\n    if (results.length === 0) {\n      printWarning('No memories found');\n      return;\n    }\n\n    printSuccess(`ReasoningBank memories (${results.length} shown):`);\n\n    for (const entry of results) {\n      console.log(`\\nüìå ${entry.key}`);\n      console.log(`   Value: ${entry.value.substring(0, 80)}${entry.value.length > 80 ? '...' : ''}`);\n      console.log(`   Confidence: ${(entry.confidence * 100).toFixed(1)}% | Usage: ${entry.usage_count}`);\n    }\n  } catch (error) {\n    printError(`Failed to list: ${error.message}`);\n  }\n}\n\n// NEW: Handle ReasoningBank status\nasync function handleReasoningBankStatus(getStatus) {\n  try {\n    const stats = await getStatus();\n\n    printSuccess('üìä ReasoningBank Status:');\n    console.log(`   Total memories: ${stats.total_memories}`);\n    console.log(`   Average confidence: ${(stats.avg_confidence * 100).toFixed(1)}%`);\n    console.log(`   Total usage: ${stats.total_usage}`);\n    console.log(`   Embeddings: ${stats.total_embeddings}`);\n    console.log(`   Trajectories: ${stats.total_trajectories}`);\n  } catch (error) {\n    printError(`Failed to get status: ${error.message}`);\n  }\n}\n\n// NEW: Build agentic-flow reasoningbank command\nfunction buildReasoningBankCommand(command, subArgs, flags) {\n  const parts = ['npx', 'agentic-flow', 'reasoningbank'];\n\n  // Map memory commands to reasoningbank commands\n  const commandMap = {\n    store: 'store',\n    query: 'query',\n    list: 'list',\n    status: 'status',\n    consolidate: 'consolidate',\n    demo: 'demo',\n    test: 'test',\n    benchmark: 'benchmark',\n  };\n\n  parts.push(commandMap[command] || command);\n\n  // Add arguments (skip the command itself)\n  const args = subArgs.slice(1);\n  args.forEach((arg) => {\n    if (!arg.startsWith('--reasoningbank') && !arg.startsWith('--rb') && !arg.startsWith('--auto')) {\n      parts.push(`\"${arg}\"`);\n    }\n  });\n\n  // Add required --agent parameter\n  parts.push('--agent', 'memory-agent');\n\n  return parts.join(' ');\n}\n\n// NEW: Handle mode management commands\nasync function handleModeCommand(command, subArgs, flags) {\n  switch (command) {\n    case 'detect':\n      await detectModes();\n      break;\n\n    case 'mode':\n      await showCurrentMode();\n      break;\n\n    case 'migrate':\n      await migrateMemory(subArgs, flags);\n      break;\n\n    default:\n      printError(`Unknown mode command: ${command}`);\n  }\n}\n\n// NEW: Detect and show available memory modes\nasync function detectModes() {\n  printInfo('üîç Detecting memory modes...\\n');\n\n  // Check basic mode\n  const basicAvailable = await checkBasicMode();\n  console.log(basicAvailable ? '‚úÖ Basic Mode (active)' : '‚ùå Basic Mode (unavailable)');\n  if (basicAvailable) {\n    console.log('   Location: ./memory/memory-store.json');\n    console.log('   Features: Simple key-value storage, fast');\n  }\n\n  console.log('');\n\n  // Check ReasoningBank mode\n  const rbAvailable = await isReasoningBankInitialized();\n  console.log(rbAvailable ? '‚úÖ ReasoningBank Mode (available)' : '‚ö†Ô∏è  ReasoningBank Mode (not initialized)');\n  if (rbAvailable) {\n    console.log('   Location: .swarm/memory.db');\n    console.log('   Features: AI-powered semantic search, learning');\n  } else {\n    console.log('   To enable: memory init --reasoningbank');\n  }\n\n  console.log('\\nüí° Usage:');\n  console.log('   Basic: memory store key \"value\"');\n  console.log('   ReasoningBank: memory store key \"value\" --reasoningbank');\n  console.log('   Auto-detect: memory query search --auto');\n}\n\n// NEW: Check if basic mode is available\nasync function checkBasicMode() {\n  try {\n    const memoryDir = './memory';\n    await fs.access(memoryDir);\n    return true;\n  } catch {\n    // Create directory if it doesn't exist\n    try {\n      await fs.mkdir(memoryDir, { recursive: true });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// NEW: Show current default mode\nasync function showCurrentMode() {\n  const rbInitialized = await isReasoningBankInitialized();\n\n  printInfo('üìä Current Memory Configuration:\\n');\n  console.log('Default Mode: AUTO (smart selection with JSON fallback)');\n  console.log('Available Modes:');\n  console.log('  ‚Ä¢ Basic Mode: Always available (JSON storage)');\n  console.log(`  ‚Ä¢ ReasoningBank Mode: ${rbInitialized ? 'Initialized ‚úÖ (will be used by default)' : 'Not initialized ‚ö†Ô∏è (JSON fallback active)'}`);\n\n  console.log('\\nüí° Mode Behavior:');\n  console.log('   (no flag)                ‚Üí AUTO: Use ReasoningBank if initialized, else JSON');\n  console.log('   --reasoningbank or --rb  ‚Üí Force ReasoningBank mode');\n  console.log('   --basic                  ‚Üí Force JSON mode');\n  console.log('   --auto                   ‚Üí Same as default (explicit)');\n}\n\n// NEW: Migrate memory between modes\nasync function migrateMemory(subArgs, flags) {\n  const targetMode = flags?.to || getArgValue(subArgs, '--to');\n\n  if (!targetMode || !['basic', 'reasoningbank'].includes(targetMode)) {\n    printError('Usage: memory migrate --to <basic|reasoningbank>');\n    return;\n  }\n\n  printInfo(`üîÑ Migrating to ${targetMode} mode...\\n`);\n\n  if (targetMode === 'reasoningbank') {\n    // Migrate basic ‚Üí ReasoningBank\n    const rbInitialized = await isReasoningBankInitialized();\n    if (!rbInitialized) {\n      printError('‚ùå ReasoningBank not initialized');\n      console.log('First run: memory init --reasoningbank\\n');\n      return;\n    }\n\n    printWarning('‚ö†Ô∏è  Migration from basic to ReasoningBank is not yet implemented');\n    console.log('This feature is coming in v2.7.1\\n');\n    console.log('For now, you can:');\n    console.log('  1. Export basic memory: memory export backup.json');\n    console.log('  2. Manually import to ReasoningBank');\n  } else {\n    // Migrate ReasoningBank ‚Üí basic\n    printWarning('‚ö†Ô∏è  Migration from ReasoningBank to basic is not yet implemented');\n    console.log('This feature is coming in v2.7.1\\n');\n  }\n}\n\n// Helper to get argument value\nfunction getArgValue(args, flag) {\n  const index = args.indexOf(flag);\n  if (index !== -1 && index + 1 < args.length) {\n    return args[index + 1];\n  }\n  return null;\n}\n\nfunction showMemoryHelp() {\n  console.log('Memory commands:');\n  console.log('  store <key> <value>    Store a key-value pair');\n  console.log('  query <search>         Search for entries');\n  console.log('  stats                  Show memory statistics');\n  console.log('  export [filename]      Export memory to file');\n  console.log('  import <filename>      Import memory from file');\n  console.log('  clear --namespace <ns> Clear a namespace');\n  console.log('  list                   List all namespaces');\n  console.log();\n  console.log('üß† ReasoningBank Commands (NEW in v2.7.0):');\n  console.log('  init --reasoningbank   Initialize ReasoningBank (AI-powered memory)');\n  console.log('  status --reasoningbank Show ReasoningBank statistics');\n  console.log('  detect                 Show available memory modes');\n  console.log('  mode                   Show current memory configuration');\n  console.log('  migrate --to <mode>    Migrate between basic/reasoningbank');\n  console.log();\n  console.log('Options:');\n  console.log('  --namespace <ns>       Specify namespace for operations');\n  console.log('  --ns <ns>              Short form of --namespace');\n  console.log('  --redact               üîí Enable API key redaction (security feature)');\n  console.log('  --secure               Alias for --redact');\n  console.log();\n  console.log('üéØ Mode Selection:');\n  console.log('  (no flag)              AUTO MODE (default) - Uses ReasoningBank if initialized, else JSON fallback');\n  console.log('  --reasoningbank, --rb  Force ReasoningBank mode (AI-powered)');\n  console.log('  --basic                Force Basic mode (JSON storage)');\n  console.log('  --auto                 Explicit auto-detect (same as default)');\n  console.log();\n  console.log('üîí Security Features (v2.6.0):');\n  console.log('  API Key Protection:    Automatically detects and redacts sensitive data');\n  console.log('  Patterns Detected:     Anthropic, OpenRouter, Gemini, Bearer tokens, etc.');\n  console.log('  Auto-Validation:       Warns when storing unredacted sensitive data');\n  console.log('  Display Redaction:     Redact sensitive data when querying with --redact');\n  console.log();\n  console.log('Examples:');\n  console.log('  # Basic mode (default - backward compatible)');\n  console.log('  memory store previous_work \"Research findings from yesterday\"');\n  console.log('  memory store api_config \"key=sk-ant-...\" --redact  # üîí Redacts API key');\n  console.log('  memory query research --namespace sparc');\n  console.log();\n  console.log('  # ReasoningBank mode (AI-powered, opt-in)');\n  console.log('  memory init --reasoningbank  # One-time setup');\n  console.log('  memory store api_pattern \"Always use env vars\" --reasoningbank');\n  console.log('  memory query \"API configuration\" --reasoningbank  # Semantic search!');\n  console.log('  memory status --reasoningbank  # Show AI metrics');\n  console.log();\n  console.log('  # Auto-detect mode (smart selection)');\n  console.log('  memory query config --auto  # Uses ReasoningBank if available');\n  console.log();\n  console.log('  # Mode management');\n  console.log('  memory detect  # Show available modes');\n  console.log('  memory mode    # Show current configuration');\n  console.log();\n  console.log('üí° Tips:');\n  console.log('  ‚Ä¢ AUTO MODE (default): Automatically uses best available storage');\n  console.log('  ‚Ä¢ ReasoningBank: AI-powered semantic search (learns from patterns)');\n  console.log('  ‚Ä¢ JSON fallback: Always available, fast, simple key-value storage');\n  console.log('  ‚Ä¢ Initialize ReasoningBank once: \"memory init --reasoningbank\"');\n  console.log('  ‚Ä¢ Always use --redact when storing API keys or secrets!');\n}\n"],"names":["printSuccess","printError","printWarning","printInfo","promises","fs","KeyRedactor","exec","promisify","execAsync","memoryCommand","subArgs","flags","memorySubcommand","memoryStore","namespace","ns","getNamespaceFromArgs","enableRedaction","redact","includes","mode","detectMemoryMode","loadMemory","content","readFile","JSON","parse","saveMemory","data","mkdir","recursive","writeFile","stringify","handleReasoningBankCommand","handleModeCommand","storeMemory","queryMemory","showMemoryStats","exportMemory","importMemory","clearMemory","listNamespaces","showMemoryHelp","key","value","slice","join","redactedValue","securityWarnings","validation","validate","safe","warnings","forEach","warning","console","log","filter","e","push","timestamp","Date","now","redacted","length","TextEncoder","encode","err","message","search","results","entries","Object","entry","sort","a","b","displayValue","substring","toLocaleString","totalEntries","namespaceStats","keys","toFixed","count","filename","exportData","values","importContent","importData","existingData","totalImported","existingKeys","Set","map","newEntries","has","nsFromArgs","entryCount","namespaces","namespaceIndex","indexOf","nsIndex","reasoningbank","rb","auto","initialized","isReasoningBankInitialized","basic","dbPath","access","command","initializeReasoningBank","queryMemories","listMemories","getStatus","checkReasoningBankTables","migrateReasoningBank","cleanup","process","env","CLAUDE_FLOW_DB_PATH","tableCheck","exists","missingTables","migrationResult","success","addedTables","error","setTimeout","exit","handleReasoningBankStore","handleReasoningBankQuery","handleReasoningBankList","handleReasoningBankStatus","cmd","stdout","timeout","getArgValue","memoryId","agent","domain","limit","confidence","usage_count","score","created_at","parseInt","stats","total_memories","avg_confidence","total_usage","total_embeddings","total_trajectories","buildReasoningBankCommand","parts","commandMap","store","query","list","status","consolidate","demo","test","benchmark","args","arg","startsWith","detectModes","showCurrentMode","migrateMemory","basicAvailable","checkBasicMode","rbAvailable","memoryDir","rbInitialized","targetMode","to","flag","index"],"mappings":"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ACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd"}