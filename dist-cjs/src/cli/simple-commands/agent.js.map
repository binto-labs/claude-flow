{"version":3,"sources":["../../../../src/cli/simple-commands/agent.js"],"sourcesContent":["// agent.js - Agent management commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { onAgentSpawn, onAgentAction } from './performance-hooks.js';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport async function agentCommand(subArgs, flags) {\n  const agentCmd = subArgs[0];\n\n  // Handle --help flag explicitly to show full help\n  if (flags.help || flags.h || agentCmd === '--help' || agentCmd === '-h') {\n    showAgentHelp();\n    return;\n  }\n\n  switch (agentCmd) {\n    case 'run':\n    case 'execute':\n      await executeAgentTask(subArgs, flags);\n      break;\n\n    case 'spawn':\n      await spawnAgent(subArgs, flags);\n      break;\n\n    case 'list':\n      await listAgents(subArgs, flags);\n      break;\n\n    case 'agents':\n      await listAgenticFlowAgents(subArgs, flags);\n      break;\n\n    case 'create':\n      await createAgent(subArgs, flags);\n      break;\n\n    case 'info':\n      await getAgentInfo(subArgs, flags);\n      break;\n\n    case 'conflicts':\n      await checkAgentConflicts(subArgs, flags);\n      break;\n\n    case 'memory':\n      await memoryCommand(subArgs, flags);\n      break;\n\n    case 'config':\n    case 'configure':\n      await configAgenticFlow(subArgs, flags);\n      break;\n\n    case 'mcp':\n    case 'mcp-server':\n      await mcpAgenticFlow(subArgs, flags);\n      break;\n\n    case 'hierarchy':\n      await manageHierarchy(subArgs, flags);\n      break;\n\n    case 'network':\n      await manageNetwork(subArgs, flags);\n      break;\n\n    case 'ecosystem':\n      await manageEcosystem(subArgs, flags);\n      break;\n\n    case 'provision':\n      await provisionAgent(subArgs, flags);\n      break;\n\n    case 'terminate':\n      await terminateAgent(subArgs, flags);\n      break;\n\n    case 'booster':\n      const { agentBoosterCommand } = await import('./agent-booster.js');\n      await agentBoosterCommand(subArgs, flags);\n      break;\n\n    default:\n      showAgentHelp();\n  }\n}\n\nasync function executeAgentTask(subArgs, flags) {\n  const agentType = subArgs[1];\n  const task = subArgs[2];\n\n  if (!agentType || !task) {\n    printError('Usage: agent run <agent-type> \"<task>\" [--provider <provider>] [--model <model>]');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Create a REST API\"');\n    console.log('  claude-flow agent run researcher \"Research AI trends\" --provider openrouter');\n    console.log('  claude-flow agent run reviewer \"Review code for security\" --provider onnx');\n    return;\n  }\n\n  // Check for memory flags and .env configuration\n  if (flags.enableMemory || flags.memory) {\n    const { checkEnvConfig, showEnvSetupInstructions } = await import('./env-template.js');\n    const envCheck = await checkEnvConfig(process.cwd());\n\n    if (!envCheck.exists) {\n      printWarning('‚ö†Ô∏è  ReasoningBank memory requires .env configuration');\n      showEnvSetupInstructions();\n      console.log('‚ùå Cannot use --enable-memory without .env file\\n');\n      process.exit(1);\n    }\n\n    if (!envCheck.hasApiKeys) {\n      printWarning('‚ö†Ô∏è  No API keys found in .env file');\n      console.log('\\n‚ö†Ô∏è  ReasoningBank will fall back to heuristic mode (regex matching)');\n      console.log('   Without API keys, memory will NOT learn from experience!\\n');\n      showEnvSetupInstructions();\n      console.log('‚ùå Add API keys to .env to enable actual learning\\n');\n      process.exit(1);\n    }\n\n    // Show which keys are configured\n    console.log('‚úÖ API keys configured:');\n    if (envCheck.keys.anthropic) console.log('   ‚Ä¢ Anthropic (Claude)');\n    if (envCheck.keys.openrouter) console.log('   ‚Ä¢ OpenRouter (cost optimization available)');\n    if (envCheck.keys.gemini) console.log('   ‚Ä¢ Gemini (free tier available)');\n    console.log('');\n  }\n\n  printSuccess(`üöÄ Executing ${agentType} agent with agentic-flow...`);\n  console.log(`Task: ${task}`);\n\n  const provider = flags.provider || 'anthropic';\n  if (flags.provider) {\n    console.log(`Provider: ${provider}`);\n  }\n\n  try {\n    // Build command for agentic-flow\n    const cmd = buildAgenticFlowCommand(agentType, task, flags);\n    console.log('\\n‚è≥ Running agent... (this may take a moment)\\n');\n\n    // Execute agentic-flow\n    const { stdout, stderr } = await execAsync(cmd, {\n      timeout: flags.timeout || 300000,\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    if (stderr && flags.verbose) {\n      console.warn('\\nWarnings:', stderr);\n    }\n\n    printSuccess('‚úÖ Agent task completed successfully!');\n  } catch (error) {\n    printError('‚ùå Agent execution failed');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Error details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nfunction buildAgenticFlowCommand(agent, task, flags) {\n  const parts = ['npx', 'agentic-flow'];\n\n  // Agentic-flow uses --agent flag directly (no 'execute' subcommand)\n  parts.push('--agent', agent);\n  parts.push('--task', `\"${task.replace(/\"/g, '\\\\\"')}\"`);\n\n  if (flags.provider) {\n    parts.push('--provider', flags.provider);\n  }\n\n  if (flags.model) {\n    parts.push('--model', flags.model);\n  }\n\n  if (flags.temperature) {\n    parts.push('--temperature', flags.temperature);\n  }\n\n  if (flags.maxTokens) {\n    parts.push('--max-tokens', flags.maxTokens);\n  }\n\n  if (flags.format) {\n    parts.push('--output-format', flags.format);\n  }\n\n  if (flags.stream) {\n    parts.push('--stream');\n  }\n\n  if (flags.verbose) {\n    parts.push('--verbose');\n  }\n\n  // ReasoningBank memory options (NEW in v2.6.0)\n  if (flags.enableMemory || flags.memory) {\n    parts.push('--enable-memory');\n  }\n\n  if (flags.memoryDb || flags.memoryDatabase) {\n    parts.push('--memory-db', flags.memoryDb || flags.memoryDatabase);\n  }\n\n  if (flags.memoryK) {\n    parts.push('--memory-k', flags.memoryK);\n  }\n\n  if (flags.memoryDomain) {\n    parts.push('--memory-domain', flags.memoryDomain);\n  }\n\n  if (flags.memoryLearning === false) {\n    parts.push('--no-memory-learning');\n  }\n\n  if (flags.memoryMinConfidence) {\n    parts.push('--memory-min-confidence', flags.memoryMinConfidence);\n  }\n\n  if (flags.memoryTaskId) {\n    parts.push('--memory-task-id', flags.memoryTaskId);\n  }\n\n  // Model optimization options (NEW in v2.6.0 - agentic-flow v1.5.0+)\n  if (flags.optimize) {\n    parts.push('--optimize');\n  }\n\n  if (flags.priority) {\n    parts.push('--priority', flags.priority);\n  }\n\n  if (flags.maxCost) {\n    parts.push('--max-cost', flags.maxCost);\n  }\n\n  // Additional execution options (NEW in v2.6.0)\n  if (flags.retry) {\n    parts.push('--retry');\n  }\n\n  if (flags.agentsDir) {\n    parts.push('--agents-dir', flags.agentsDir);\n  }\n\n  if (flags.timeout) {\n    parts.push('--timeout', flags.timeout);\n  }\n\n  // API key overrides (NEW in v2.6.0)\n  if (flags.anthropicKey) {\n    parts.push('--anthropic-key', flags.anthropicKey);\n  }\n\n  if (flags.openrouterKey) {\n    parts.push('--openrouter-key', flags.openrouterKey);\n  }\n\n  if (flags.geminiKey) {\n    parts.push('--gemini-key', flags.geminiKey);\n  }\n\n  return parts.join(' ');\n}\n\nasync function listAgenticFlowAgents(subArgs, flags) {\n  printSuccess('üìã Loading available agentic-flow agents...');\n\n  try {\n    // Agentic-flow uses 'agent list' command\n    const { stdout } = await execAsync('npx agentic-flow agent list', {\n      timeout: 30000,\n    });\n\n    console.log('\\n66+ Available Agents:\\n');\n    console.log(stdout);\n    console.log('\\nUsage:');\n    console.log('  claude-flow agent run <agent-type> \"<task>\"');\n    console.log('\\nExamples:');\n    console.log('  claude-flow agent run coder \"Build a REST API with authentication\"');\n    console.log('  claude-flow agent run security-auditor \"Review this code for vulnerabilities\"');\n    console.log('  claude-flow agent run full-stack-developer \"Create a Next.js app\"');\n  } catch (error) {\n    printError('Failed to load agentic-flow agents');\n    console.error('Make sure agentic-flow is installed: npm install -g agentic-flow');\n    console.error(error.message);\n  }\n}\n\nasync function createAgent(subArgs, flags) {\n  printSuccess('üõ†Ô∏è  Creating custom agent with agentic-flow...');\n\n  try {\n    // Build command for agentic-flow agent create\n    let cmd = 'npx agentic-flow agent create';\n\n    if (flags.name) {\n      cmd += ` --name \"${flags.name}\"`;\n    }\n\n    if (flags.description) {\n      cmd += ` --description \"${flags.description}\"`;\n    }\n\n    if (flags.category) {\n      cmd += ` --category \"${flags.category}\"`;\n    }\n\n    if (flags.prompt) {\n      cmd += ` --prompt \"${flags.prompt}\"`;\n    }\n\n    if (flags.tools) {\n      cmd += ` --tools \"${flags.tools}\"`;\n    }\n\n    const { stdout, stderr } = await execAsync(cmd, {\n      timeout: 60000,\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    printSuccess('‚úÖ Agent created successfully!');\n    console.log('\\nNext steps:');\n    console.log('  1. Run your agent: claude-flow agent run <agent-name> \"<task>\"');\n    console.log('  2. View agent info: claude-flow agent info <agent-name>');\n    console.log('  3. Check for conflicts: claude-flow agent conflicts');\n  } catch (error) {\n    printError('‚ùå Failed to create agent');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nasync function getAgentInfo(subArgs, flags) {\n  const agentName = subArgs[1];\n\n  if (!agentName) {\n    printError('Usage: agent info <agent-name>');\n    console.log('\\nExample:');\n    console.log('  claude-flow agent info coder');\n    console.log('  claude-flow agent info security-auditor');\n    return;\n  }\n\n  printSuccess(`üìä Getting information for agent: ${agentName}`);\n\n  try {\n    const { stdout } = await execAsync(`npx agentic-flow agent info ${agentName}`, {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError(`‚ùå Failed to get agent info for: ${agentName}`);\n    console.error(error.message);\n    console.log('\\nTip: List all agents with: claude-flow agent agents');\n    process.exit(1);\n  }\n}\n\nasync function checkAgentConflicts(subArgs, flags) {\n  printSuccess('üîç Checking for agent conflicts between package and local agents...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow agent conflicts', {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n\n    if (stdout.includes('No conflicts found')) {\n      printSuccess('‚úÖ No conflicts detected!');\n    } else {\n      printWarning('‚ö†Ô∏è  Conflicts found! Local agents will override package agents with the same path.');\n    }\n  } catch (error) {\n    printError('‚ùå Failed to check agent conflicts');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function memoryCommand(subArgs, flags) {\n  const memoryCmd = subArgs[1];\n\n  switch (memoryCmd) {\n    case 'init':\n    case 'initialize':\n      await initializeMemory(subArgs, flags);\n      break;\n\n    case 'status':\n    case 'info':\n      await getMemoryStatus(subArgs, flags);\n      break;\n\n    case 'consolidate':\n    case 'prune':\n      await consolidateMemory(subArgs, flags);\n      break;\n\n    case 'list':\n    case 'ls':\n      await listMemories(subArgs, flags);\n      break;\n\n    case 'demo':\n      await runMemoryDemo(subArgs, flags);\n      break;\n\n    case 'test':\n      await runMemoryTest(subArgs, flags);\n      break;\n\n    case 'benchmark':\n      await runMemoryBenchmark(subArgs, flags);\n      break;\n\n    default:\n      showMemoryHelp();\n  }\n}\n\nasync function initializeMemory(subArgs, flags) {\n  const dbPath = flags.db || flags.database || '.swarm/memory.db';\n\n  printSuccess('üß† Initializing ReasoningBank memory system...');\n  console.log(`Database: ${dbPath}`);\n\n  try {\n    const { stdout, stderr } = await execAsync('npx agentic-flow reasoningbank init', {\n      timeout: 30000,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    printSuccess('‚úÖ ReasoningBank initialized successfully!');\n    console.log('\\nNext steps:');\n    console.log('  1. Run agents with --enable-memory flag');\n    console.log('  2. Check status: claude-flow agent memory status');\n    console.log('  3. View demo: claude-flow agent memory demo');\n  } catch (error) {\n    printError('‚ùå Failed to initialize ReasoningBank');\n    console.error(error.message);\n    if (error.stderr) {\n      console.error('Details:', error.stderr);\n    }\n    process.exit(1);\n  }\n}\n\nasync function getMemoryStatus(subArgs, flags) {\n  printSuccess('üß† ReasoningBank Status:');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank status', {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to get memory status');\n    console.error(error.message);\n    console.log('\\nTip: Initialize first with: claude-flow agent memory init');\n    process.exit(1);\n  }\n}\n\nasync function consolidateMemory(subArgs, flags) {\n  printSuccess('üß† Consolidating ReasoningBank memories...');\n  console.log('This will deduplicate and prune old/low-quality memories');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank consolidate', {\n      timeout: 60000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Memory consolidation complete!');\n  } catch (error) {\n    printError('‚ùå Consolidation failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function listMemories(subArgs, flags) {\n  const domain = flags.domain;\n  const limit = flags.limit || 10;\n\n  printSuccess(`üß† Listing ReasoningBank memories (limit: ${limit})`);\n  if (domain) {\n    console.log(`Domain filter: ${domain}`);\n  }\n\n  try {\n    let cmd = 'npx agentic-flow reasoningbank list';\n    if (domain) {\n      cmd += ` --domain ${domain}`;\n    }\n    cmd += ` --limit ${limit}`;\n\n    const { stdout } = await execAsync(cmd, {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to list memories');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryDemo(subArgs, flags) {\n  printSuccess('üéØ Running ReasoningBank demo...');\n  console.log('This will show how memory improves task success over time\\n');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank demo', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Demo complete!');\n  } catch (error) {\n    printError('‚ùå Demo failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryTest(subArgs, flags) {\n  printSuccess('üß™ Running ReasoningBank integration tests...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank test', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Tests complete!');\n  } catch (error) {\n    printError('‚ùå Tests failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function runMemoryBenchmark(subArgs, flags) {\n  printSuccess('‚ö° Running ReasoningBank performance benchmarks...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow reasoningbank benchmark', {\n      timeout: 120000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Benchmarks complete!');\n  } catch (error) {\n    printError('‚ùå Benchmark failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nfunction showMemoryHelp() {\n  console.log('Memory (ReasoningBank) commands:');\n  console.log('  init                             Initialize ReasoningBank database');\n  console.log('  status                           Show memory system status');\n  console.log('  consolidate                      Deduplicate and prune memories');\n  console.log('  list [--domain <domain>]         List stored memories');\n  console.log('  demo                             Run interactive demo');\n  console.log('  test                             Run integration tests');\n  console.log('  benchmark                        Run performance benchmarks');\n  console.log();\n  console.log('Options:');\n  console.log('  --db, --database <path>          Database path [default: .swarm/memory.db]');\n  console.log('  --domain <domain>                Filter by domain');\n  console.log('  --limit <n>                      Limit results [default: 10]');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow agent memory init');\n  console.log('  claude-flow agent memory status');\n  console.log('  claude-flow agent memory list --domain web --limit 5');\n  console.log('  claude-flow agent memory consolidate');\n  console.log('  claude-flow agent memory demo');\n}\n\n// Configuration Management for agentic-flow\nasync function configAgenticFlow(subArgs, flags) {\n  const configCmd = subArgs[1];\n\n  switch (configCmd) {\n    case 'set':\n      await agenticConfigSet(subArgs, flags);\n      break;\n    case 'get':\n      await agenticConfigGet(subArgs, flags);\n      break;\n    case 'list':\n      await agenticConfigList(subArgs, flags);\n      break;\n    case 'delete':\n    case 'remove':\n    case 'rm':\n      await agenticConfigDelete(subArgs, flags);\n      break;\n    case 'reset':\n      await agenticConfigReset(subArgs, flags);\n      break;\n    case undefined:\n    case 'wizard':\n    case 'interactive':\n      await agenticConfigWizard(subArgs, flags);\n      break;\n    default:\n      showAgenticConfigHelp();\n  }\n}\n\nasync function agenticConfigSet(subArgs, flags) {\n  const key = subArgs[2];\n  const value = subArgs[3];\n\n  if (!key || !value) {\n    printError('Usage: agent config set <key> <value>');\n    console.log('\\nExample:');\n    console.log('  claude-flow agent config set ANTHROPIC_API_KEY sk-ant-xxx');\n    console.log('  claude-flow agent config set DEFAULT_MODEL claude-3-5-sonnet-20241022');\n    return;\n  }\n\n  printSuccess(`üîß Setting agentic-flow configuration: ${key}`);\n\n  try {\n    const { stdout } = await execAsync(`npx agentic-flow config set ${key} \"${value}\"`, {\n      timeout: 30000,\n    });\n    console.log(stdout);\n    printSuccess('‚úÖ Configuration set successfully!');\n  } catch (error) {\n    printError(`‚ùå Failed to set configuration: ${key}`);\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticConfigGet(subArgs, flags) {\n  const key = subArgs[2];\n\n  if (!key) {\n    printError('Usage: agent config get <key>');\n    console.log('\\nExample:');\n    console.log('  claude-flow agent config get ANTHROPIC_API_KEY');\n    return;\n  }\n\n  try {\n    const { stdout } = await execAsync(`npx agentic-flow config get ${key}`, {\n      timeout: 30000,\n    });\n    console.log(stdout);\n  } catch (error) {\n    printError(`‚ùå Failed to get configuration: ${key}`);\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticConfigList(subArgs, flags) {\n  printSuccess('üìã Listing agentic-flow configurations...');\n\n  try {\n    let cmd = 'npx agentic-flow config list';\n    if (flags.showSecrets) {\n      cmd += ' --show-secrets';\n    }\n\n    const { stdout } = await execAsync(cmd, { timeout: 30000 });\n    console.log(stdout);\n\n    if (!flags.showSecrets) {\n      console.log('\\nüí° Tip: Use --show-secrets to reveal sensitive values');\n    }\n  } catch (error) {\n    printError('‚ùå Failed to list configurations');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticConfigDelete(subArgs, flags) {\n  const key = subArgs[2];\n\n  if (!key) {\n    printError('Usage: agent config delete <key>');\n    return;\n  }\n\n  printWarning(`‚ö†Ô∏è  Deleting configuration: ${key}`);\n\n  try {\n    const { stdout } = await execAsync(`npx agentic-flow config delete ${key}`, {\n      timeout: 30000,\n    });\n    console.log(stdout);\n    printSuccess('‚úÖ Configuration deleted!');\n  } catch (error) {\n    printError(`‚ùå Failed to delete configuration: ${key}`);\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticConfigReset(subArgs, flags) {\n  if (!flags.force) {\n    printWarning('‚ö†Ô∏è  WARNING: This will reset ALL agentic-flow configurations!');\n    console.log('\\nUse --force to confirm: claude-flow agent config reset --force');\n    return;\n  }\n\n  printWarning('üîÑ Resetting agentic-flow configurations...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow config reset --force', {\n      timeout: 30000,\n    });\n    console.log(stdout);\n    printSuccess('‚úÖ Configurations reset!');\n  } catch (error) {\n    printError('‚ùå Failed to reset configurations');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticConfigWizard(subArgs, flags) {\n  printSuccess('üßô Starting agentic-flow configuration wizard...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow config wizard', {\n      timeout: 300000,\n    });\n    console.log(stdout);\n    printSuccess('‚úÖ Configuration wizard completed!');\n  } catch (error) {\n    printError('‚ùå Configuration wizard failed');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nfunction showAgenticConfigHelp() {\n  console.log('Agentic-flow configuration commands:');\n  console.log('  set <key> <value>               Set configuration value');\n  console.log('  get <key>                       Get configuration value');\n  console.log('  list                            List all configurations');\n  console.log('  delete <key>                    Delete configuration value');\n  console.log('  reset --force                   Reset to defaults');\n  console.log('  wizard                          Run interactive setup wizard');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow agent config wizard');\n  console.log('  claude-flow agent config set ANTHROPIC_API_KEY sk-ant-xxx');\n  console.log('  claude-flow agent config list --show-secrets');\n}\n\n// MCP Server Management for agentic-flow\nasync function mcpAgenticFlow(subArgs, flags) {\n  const mcpCmd = subArgs[1];\n\n  switch (mcpCmd) {\n    case 'start':\n      await agenticMcpStart(subArgs, flags);\n      break;\n    case 'stop':\n      await agenticMcpStop(subArgs, flags);\n      break;\n    case 'status':\n      await agenticMcpStatus(subArgs, flags);\n      break;\n    case 'list':\n    case 'ls':\n      await agenticMcpList(subArgs, flags);\n      break;\n    case 'logs':\n      await agenticMcpLogs(subArgs, flags);\n      break;\n    case 'restart':\n      await agenticMcpRestart(subArgs, flags);\n      break;\n    default:\n      showAgenticMcpHelp();\n  }\n}\n\nasync function agenticMcpStart(subArgs, flags) {\n  printSuccess('üöÄ Starting agentic-flow MCP server...');\n\n  try {\n    let cmd = 'npx agentic-flow mcp start';\n    if (flags.port) cmd += ` --port ${flags.port}`;\n    if (flags.host) cmd += ` --host ${flags.host}`;\n    if (flags.daemon || flags.background) cmd += ' --daemon';\n\n    const { stdout } = await execAsync(cmd, { timeout: 60000 });\n    console.log(stdout);\n    printSuccess('‚úÖ MCP server started!');\n  } catch (error) {\n    printError('‚ùå Failed to start MCP server');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticMcpStop(subArgs, flags) {\n  printWarning('üõë Stopping agentic-flow MCP server...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow mcp stop', { timeout: 30000 });\n    console.log(stdout);\n    printSuccess('‚úÖ MCP server stopped!');\n  } catch (error) {\n    printError('‚ùå Failed to stop MCP server');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticMcpStatus(subArgs, flags) {\n  printSuccess('üìä Getting agentic-flow MCP server status...');\n\n  try {\n    let cmd = 'npx agentic-flow mcp status';\n    if (flags.detailed || flags.verbose) cmd += ' --detailed';\n\n    const { stdout } = await execAsync(cmd, { timeout: 30000 });\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to get MCP status');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticMcpList(subArgs, flags) {\n  printSuccess('üìã Listing agentic-flow MCP tools...');\n\n  try {\n    let cmd = 'npx agentic-flow mcp list';\n    if (flags.server) cmd += ` --server ${flags.server}`;\n    if (flags.category) cmd += ` --category ${flags.category}`;\n    if (flags.detailed || flags.verbose) cmd += ' --detailed';\n\n    const { stdout } = await execAsync(cmd, { timeout: 30000 });\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to list MCP tools');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticMcpLogs(subArgs, flags) {\n  printSuccess('üìÑ Getting agentic-flow MCP logs...');\n\n  try {\n    let cmd = 'npx agentic-flow mcp logs';\n    if (flags.lines) cmd += ` --lines ${flags.lines}`;\n    if (flags.follow || flags.f) cmd += ' --follow';\n    if (flags.error) cmd += ' --error';\n\n    const { stdout } = await execAsync(cmd, {\n      timeout: flags.follow ? 0 : 30000,\n      maxBuffer: 10 * 1024 * 1024\n    });\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to get MCP logs');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nasync function agenticMcpRestart(subArgs, flags) {\n  printWarning('üîÑ Restarting agentic-flow MCP server...');\n\n  try {\n    await agenticMcpStop(subArgs, { ...flags, quiet: true });\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    await agenticMcpStart(subArgs, flags);\n    printSuccess('‚úÖ MCP server restarted!');\n  } catch (error) {\n    printError('‚ùå Failed to restart MCP server');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\nfunction showAgenticMcpHelp() {\n  console.log('Agentic-flow MCP server commands:');\n  console.log('  start [--port <port>]           Start MCP server');\n  console.log('  stop                            Stop MCP server');\n  console.log('  restart                         Restart MCP server');\n  console.log('  status [--detailed]             Get server status');\n  console.log('  list [--server <name>]          List MCP tools');\n  console.log('  logs [--lines <n>] [--follow]   View server logs');\n  console.log();\n  console.log('Options:');\n  console.log('  --port <number>                 Server port (default: 3000)');\n  console.log('  --host <string>                 Server host (default: localhost)');\n  console.log('  --daemon, --background          Run in background');\n  console.log('  --server <name>                 Filter by server name');\n  console.log('  --category <type>               Filter by tool category');\n  console.log('  --detailed, --verbose           Detailed output');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow agent mcp start --daemon');\n  console.log('  claude-flow agent mcp status --detailed');\n  console.log('  claude-flow agent mcp list --server agent-booster');\n  console.log('  claude-flow agent mcp logs --lines 50 --follow');\n}\n\nasync function spawnAgent(subArgs, flags) {\n  const agentType = subArgs[1] || 'general';\n  const agentName = getFlag(subArgs, '--name') || flags.name || `agent-${Date.now()}`;\n  const agentId = `${agentType}-${Date.now()}`;\n\n  // Create the agent object\n  const agent = {\n    id: agentId,\n    name: agentName,\n    type: agentType,\n    status: 'active',\n    activeTasks: 0,\n    lastActivity: Date.now(),\n    capabilities: getAgentCapabilities(agentType),\n    createdAt: Date.now()\n  };\n\n  // Store agent in session/agents directory\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  // Ensure agents directory exists\n  const agentsDir = '.claude-flow/agents';\n  await fs.mkdir(agentsDir, { recursive: true });\n  \n  // Save agent data\n  const agentFile = path.join(agentsDir, `${agentId}.json`);\n  await fs.writeFile(agentFile, JSON.stringify(agent, null, 2));\n  \n  // Update performance metrics\n  const perfFile = '.claude-flow/metrics/performance.json';\n  try {\n    const perfData = JSON.parse(await fs.readFile(perfFile, 'utf8'));\n    perfData.totalAgents = (perfData.totalAgents || 0) + 1;\n    perfData.activeAgents = (perfData.activeAgents || 0) + 1;\n    await fs.writeFile(perfFile, JSON.stringify(perfData, null, 2));\n  } catch (e) {\n    // Create new performance file if doesn't exist\n    await fs.writeFile(perfFile, JSON.stringify({\n      startTime: Date.now(),\n      totalTasks: 0,\n      successfulTasks: 0,\n      failedTasks: 0,\n      totalAgents: 1,\n      activeAgents: 1,\n      neuralEvents: 0\n    }, null, 2));\n  }\n\n  printSuccess(`‚úÖ Spawned ${agentType} agent: ${agentName}`);\n  console.log('ü§ñ Agent successfully created:');\n  console.log(`   ID: ${agentId}`);\n  console.log(`   Type: ${agentType}`);\n  console.log(`   Name: ${agentName}`);\n  console.log(`   Capabilities: ${agent.capabilities.join(', ')}`);\n  console.log(`   Status: ${agent.status}`);\n  console.log(`   Location: ${agentFile}`);\n  \n  // Track agent spawn for performance metrics\n  await onAgentSpawn(agentId, agentType, { name: agentName });\n}\n\nfunction getAgentCapabilities(type) {\n  const capabilities = {\n    researcher: ['Research', 'Analysis', 'Information Gathering', 'Documentation'],\n    coder: ['Code Generation', 'Implementation', 'Refactoring', 'Debugging'],\n    tester: ['Testing', 'Validation', 'Quality Assurance', 'Performance Testing'],\n    analyst: ['Data Analysis', 'Pattern Recognition', 'Reporting', 'Optimization'],\n    coordinator: ['Task Management', 'Workflow Orchestration', 'Resource Allocation'],\n    general: ['Research', 'Analysis', 'Code Generation']\n  };\n  return capabilities[type] || capabilities.general;\n}\n\nasync function listAgents(subArgs, flags) {\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  const agentsDir = '.claude-flow/agents';\n  const agents = [];\n  \n  try {\n    const agentFiles = await fs.readdir(agentsDir);\n    for (const file of agentFiles) {\n      if (file.endsWith('.json')) {\n        try {\n          const content = await fs.readFile(path.join(agentsDir, file), 'utf8');\n          const agent = JSON.parse(content);\n          agents.push(agent);\n        } catch {\n          // Skip invalid agent files\n        }\n      }\n    }\n  } catch {\n    // Agents directory doesn't exist yet\n  }\n  \n  if (agents.length > 0) {\n    printSuccess(`Active agents (${agents.length}):`);\n    agents.forEach(agent => {\n      const statusEmoji = agent.status === 'active' ? 'üü¢' : 'üü°';\n      console.log(`${statusEmoji} ${agent.name} (${agent.type})`);\n      console.log(`   ID: ${agent.id}`);\n      console.log(`   Status: ${agent.status}`);\n      console.log(`   Tasks: ${agent.activeTasks}`);\n      console.log(`   Created: ${new Date(agent.createdAt).toLocaleString()}`);\n      console.log('');\n    });\n  } else {\n    console.log('üìã No agents currently active');\n    console.log('\\nTo create agents:');\n    console.log('  claude-flow agent spawn researcher --name \"ResearchBot\"');\n    console.log('  claude-flow agent spawn coder --name \"CodeBot\"');\n    console.log('  claude-flow agent spawn analyst --name \"DataBot\"');\n  }\n}\n\nasync function manageHierarchy(subArgs, flags) {\n  const hierarchyCmd = subArgs[1];\n\n  switch (hierarchyCmd) {\n    case 'create':\n      const hierarchyType = subArgs[2] || 'basic';\n      printSuccess(`Creating ${hierarchyType} agent hierarchy`);\n      console.log('üèóÔ∏è  Hierarchy structure would include:');\n      console.log('   - Coordinator Agent (manages workflow)');\n      console.log('   - Specialist Agents (domain-specific tasks)');\n      console.log('   - Worker Agents (execution tasks)');\n      break;\n\n    case 'show':\n      printSuccess('Current agent hierarchy:');\n      console.log('üìä No hierarchy configured (orchestrator not running)');\n      break;\n\n    default:\n      console.log('Hierarchy commands: create, show');\n      console.log('Examples:');\n      console.log('  claude-flow agent hierarchy create enterprise');\n      console.log('  claude-flow agent hierarchy show');\n  }\n}\n\nasync function manageNetwork(subArgs, flags) {\n  const networkCmd = subArgs[1];\n\n  switch (networkCmd) {\n    case 'topology':\n      printSuccess('Agent network topology:');\n      console.log('üåê Network visualization would show agent connections');\n      break;\n\n    case 'metrics':\n      printSuccess('Network performance metrics:');\n      console.log('üìà Communication latency, throughput, reliability stats');\n      break;\n\n    default:\n      console.log('Network commands: topology, metrics');\n  }\n}\n\nasync function manageEcosystem(subArgs, flags) {\n  const ecosystemCmd = subArgs[1];\n\n  switch (ecosystemCmd) {\n    case 'status':\n      printSuccess('Agent ecosystem status:');\n      console.log('üå± Ecosystem health: Not running');\n      console.log('   Active Agents: 0');\n      console.log('   Resource Usage: 0%');\n      console.log('   Task Queue: Empty');\n      break;\n\n    case 'optimize':\n      printSuccess('Optimizing agent ecosystem...');\n      console.log('‚ö° Optimization would include:');\n      console.log('   - Load balancing across agents');\n      console.log('   - Resource allocation optimization');\n      console.log('   - Communication path optimization');\n      break;\n\n    default:\n      console.log('Ecosystem commands: status, optimize');\n  }\n}\n\nasync function provisionAgent(subArgs, flags) {\n  const provision = subArgs[1];\n\n  if (!provision) {\n    printError('Usage: agent provision <count>');\n    return;\n  }\n\n  const count = parseInt(provision);\n  if (isNaN(count) || count < 1) {\n    printError('Count must be a positive number');\n    return;\n  }\n\n  printSuccess(`Provisioning ${count} agents...`);\n  console.log('üöÄ Auto-provisioning would create:');\n  for (let i = 1; i <= count; i++) {\n    console.log(`   Agent ${i}: Type=general, Status=provisioning`);\n  }\n}\n\nasync function terminateAgent(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent terminate <agent-id>');\n    return;\n  }\n\n  printSuccess(`Terminating agent: ${agentId}`);\n  console.log('üõë Agent would be gracefully shut down');\n}\n\nasync function showAgentInfo(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent info <agent-id>');\n    return;\n  }\n\n  printSuccess(`Agent information: ${agentId}`);\n  console.log('üìä Agent details would include:');\n  console.log('   Status, capabilities, current tasks, performance metrics');\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\nfunction showAgentHelp() {\n  console.log('Agent commands:');\n  console.log('\\nüöÄ Agentic-Flow Integration (NEW in v2.6.0):');\n  console.log('  run <agent> \"<task>\" [options]   Execute agent with multi-provider support');\n  console.log('  agents                           List all 66+ agentic-flow agents');\n  console.log('  create --name <name> [options]   Create custom agent');\n  console.log('  info <agent-name>                Show detailed agent information');\n  console.log('  conflicts                        Check for agent conflicts');\n  console.log('\\nüß† ReasoningBank Memory (NEW in v2.6.0):');\n  console.log('  memory init                      Initialize memory system');\n  console.log('  memory status                    Show memory statistics');\n  console.log('  memory consolidate               Prune and deduplicate memories');\n  console.log('  memory list [--domain <d>]       List stored memories');\n  console.log('  memory demo                      Run interactive demo');\n  console.log('  memory test                      Run integration tests');\n  console.log('  memory benchmark                 Run performance benchmarks');\n  console.log('\\nüîß Configuration Management (NEW in v2.6.0):');\n  console.log('  config wizard                    Run interactive setup wizard');\n  console.log('  config set <key> <value>         Set configuration value');\n  console.log('  config get <key>                 Get configuration value');\n  console.log('  config list [--show-secrets]     List all configurations');\n  console.log('  config delete <key>              Delete configuration value');\n  console.log('  config reset --force             Reset to defaults');\n  console.log('\\nüåê MCP Server Management (NEW in v2.6.0):');\n  console.log('  mcp start [--port <port>]        Start MCP server');\n  console.log('  mcp stop                         Stop MCP server');\n  console.log('  mcp restart                      Restart MCP server');\n  console.log('  mcp status [--detailed]          Get server status');\n  console.log('  mcp list [--server <name>]       List MCP tools');\n  console.log('  mcp logs [--lines <n>] [-f]      View server logs');\n  console.log('\\nüöÄ Agent Booster - Ultra-Fast Code Editing (NEW in v2.6.0):');\n  console.log('  booster edit <file> \"<instr>\"    Edit file (352x faster, $0)');\n  console.log('  booster batch <pattern> \"<i>\"    Batch edit files');\n  console.log('  booster parse-markdown <file>    Parse markdown edits');\n  console.log('  booster benchmark [options]      Run performance tests');\n  console.log('  booster help                     Show Agent Booster help');\n  console.log('\\nü§ñ Internal Agent Management:');\n  console.log('  spawn <type> [--name <name>]     Create internal agent');\n  console.log('  list [--verbose]                 List active internal agents');\n  console.log('  terminate <id>                   Stop specific agent');\n  console.log('  hierarchy <create|show>          Manage agent hierarchies');\n  console.log('  network <topology|metrics>       Agent network operations');\n  console.log('  ecosystem <status|optimize>      Ecosystem management');\n  console.log('  provision <count>                Auto-provision agents');\n  console.log();\n  console.log('Execution Options (for run command):');\n  console.log('  --provider <provider>            Provider: anthropic, openrouter, onnx, gemini');\n  console.log('  --model <model>                  Specific model to use');\n  console.log('  --temperature <temp>             Temperature (0.0-1.0)');\n  console.log('  --max-tokens <tokens>            Maximum tokens');\n  console.log('  --format <format>                Output format: text, json, markdown');\n  console.log('  --stream                         Enable streaming');\n  console.log('  --verbose                        Verbose output');\n  console.log();\n  console.log('Model Optimization Options (NEW in v2.6.0):');\n  console.log('  --optimize                       Auto-select optimal model (85-98% savings)');\n  console.log('  --priority <priority>            Priority: quality, cost, speed, privacy, balanced');\n  console.log('  --max-cost <dollars>             Maximum cost per task in dollars');\n  console.log();\n  console.log('Advanced Execution Options (NEW in v2.6.0):');\n  console.log('  --retry                          Auto-retry on transient errors');\n  console.log('  --agents-dir <path>              Custom agents directory');\n  console.log('  --timeout <ms>                   Execution timeout in milliseconds');\n  console.log('  --anthropic-key <key>            Override Anthropic API key');\n  console.log('  --openrouter-key <key>           Override OpenRouter API key');\n  console.log('  --gemini-key <key>               Override Gemini API key');\n  console.log();\n  console.log('Memory Options (NEW - for run command):');\n  console.log('  --enable-memory                  Enable ReasoningBank learning');\n  console.log('                                   ‚ö†Ô∏è  REQUIRES .env with API keys');\n  console.log('                                   Run: claude-flow init --env');\n  console.log('  --memory-db <path>               Memory database path [default: .swarm/memory.db]');\n  console.log('  --memory-k <n>                   Top-k memories to retrieve [default: 3]');\n  console.log('  --memory-domain <domain>         Domain filter for memories');\n  console.log('  --no-memory-learning             Disable post-task learning');\n  console.log('  --memory-min-confidence <n>      Min confidence threshold [default: 0.5]');\n  console.log('  --memory-task-id <id>            Custom task ID for tracking');\n  console.log();\n  console.log('Examples:');\n  console.log('\\n  # Execute with agentic-flow (multi-provider)');\n  console.log('  claude-flow agent run coder \"Build REST API with authentication\"');\n  console.log('  claude-flow agent run researcher \"Research React 19 features\" --provider openrouter');\n  console.log('  claude-flow agent run security-auditor \"Audit code\" --provider onnx');\n  console.log('  claude-flow agent agents  # List all available agents');\n  console.log('\\n  # Model optimization (85-98% cost savings)');\n  console.log('  claude-flow agent run coder \"Build API\" --optimize');\n  console.log('  claude-flow agent run coder \"Fix bug\" --optimize --priority cost');\n  console.log('  claude-flow agent run coder \"Critical fix\" --optimize --priority quality --max-cost 0.50');\n  console.log('\\n  # Execute with ReasoningBank memory (learns from experience)');\n  console.log('  claude-flow agent run coder \"Build API\" --enable-memory');\n  console.log('  claude-flow agent run coder \"Add auth\" --enable-memory --memory-domain api');\n  console.log('  claude-flow agent run coder \"Fix bug\" --enable-memory --memory-k 5');\n  console.log('\\n  # Memory management');\n  console.log('  claude-flow agent memory init');\n  console.log('  claude-flow agent memory status');\n  console.log('  claude-flow agent memory list --domain api --limit 10');\n  console.log('  claude-flow agent memory consolidate');\n  console.log('  claude-flow agent memory demo  # See 70% ‚Üí 88% success improvement');\n  console.log('\\n  # Configuration management');\n  console.log('  claude-flow agent config wizard  # Interactive setup');\n  console.log('  claude-flow agent config set ANTHROPIC_API_KEY sk-ant-xxx');\n  console.log('  claude-flow agent config list --show-secrets');\n  console.log('  claude-flow agent config get DEFAULT_MODEL');\n  console.log('\\n  # MCP server management');\n  console.log('  claude-flow agent mcp start --daemon');\n  console.log('  claude-flow agent mcp status --detailed');\n  console.log('  claude-flow agent mcp list --server agent-booster');\n  console.log('  claude-flow agent mcp logs --follow');\n  console.log('\\n  # Internal agent management');\n  console.log('  claude-flow agent spawn researcher --name \"DataBot\"');\n  console.log('  claude-flow agent list --verbose');\n  console.log('  claude-flow agent hierarchy create enterprise');\n}\n"],"names":["printSuccess","printError","printWarning","onAgentSpawn","exec","promisify","execAsync","agentCommand","subArgs","flags","agentCmd","help","h","showAgentHelp","executeAgentTask","spawnAgent","listAgents","listAgenticFlowAgents","createAgent","getAgentInfo","checkAgentConflicts","memoryCommand","configAgenticFlow","mcpAgenticFlow","manageHierarchy","manageNetwork","manageEcosystem","provisionAgent","terminateAgent","agentBoosterCommand","agentType","task","console","log","enableMemory","memory","checkEnvConfig","showEnvSetupInstructions","envCheck","process","cwd","exists","exit","hasApiKeys","keys","anthropic","openrouter","gemini","provider","cmd","buildAgenticFlowCommand","stdout","stderr","timeout","maxBuffer","verbose","warn","error","message","agent","parts","push","replace","model","temperature","maxTokens","format","stream","memoryDb","memoryDatabase","memoryK","memoryDomain","memoryLearning","memoryMinConfidence","memoryTaskId","optimize","priority","maxCost","retry","agentsDir","anthropicKey","openrouterKey","geminiKey","join","name","description","category","prompt","tools","agentName","includes","memoryCmd","initializeMemory","getMemoryStatus","consolidateMemory","listMemories","runMemoryDemo","runMemoryTest","runMemoryBenchmark","showMemoryHelp","dbPath","db","database","domain","limit","configCmd","agenticConfigSet","agenticConfigGet","agenticConfigList","agenticConfigDelete","agenticConfigReset","undefined","agenticConfigWizard","showAgenticConfigHelp","key","value","showSecrets","force","mcpCmd","agenticMcpStart","agenticMcpStop","agenticMcpStatus","agenticMcpList","agenticMcpLogs","agenticMcpRestart","showAgenticMcpHelp","port","host","daemon","background","detailed","server","lines","follow","f","quiet","Promise","resolve","setTimeout","getFlag","Date","now","agentId","id","type","status","activeTasks","lastActivity","capabilities","getAgentCapabilities","createdAt","promises","fs","path","mkdir","recursive","agentFile","writeFile","JSON","stringify","perfFile","perfData","parse","readFile","totalAgents","activeAgents","e","startTime","totalTasks","successfulTasks","failedTasks","neuralEvents","researcher","coder","tester","analyst","coordinator","general","agents","agentFiles","readdir","file","endsWith","content","length","forEach","statusEmoji","toLocaleString","hierarchyCmd","hierarchyType","networkCmd","ecosystemCmd","provision","count","parseInt","isNaN","i","showAgentInfo","args","flagName","index","indexOf"],"mappings":"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"}