{"version":3,"sources":["../../../../src/cli/simple-commands/env-template.js"],"sourcesContent":["// env-template.js - Environment template generator\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { existsSync } from 'fs';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n/**\n * Generate .env template with configuration instructions\n */\nexport async function generateEnvTemplate(workingDir = process.cwd(), force = false) {\n  const envPath = path.join(workingDir, '.env');\n\n  // Check if .env already exists\n  if (existsSync(envPath) && !force) {\n    printWarning('‚ö†Ô∏è  .env file already exists');\n    console.log('Use --force to overwrite existing .env file');\n    return { exists: true, created: false };\n  }\n\n  const template = `# Agentic Flow Configuration\n# Generated by claude-flow init --env\n# Created: ${new Date().toISOString()}\n\n# ============================================\n# REQUIRED FOR REASONINGBANK MEMORY\n# ============================================\n# Without these, ReasoningBank will fall back to heuristic mode (regex matching)\n# For actual learning and memory consolidation, you MUST provide API keys\n\n# Anthropic API key for Claude models (sk-ant-...)\n# Get your key: https://console.anthropic.com/settings/keys\nANTHROPIC_API_KEY=\n\n# OpenRouter API key for alternative models (sk-or-v1-...)\n# Get your key: https://openrouter.ai/keys\n# Enables 99% cost savings with DeepSeek R1 for judge/distill\nOPENROUTER_API_KEY=\n\n# Google Gemini API key (optional, for free tier)\n# Get your key: https://aistudio.google.com/app/apikey\nGOOGLE_GEMINI_API_KEY=\n\n# ============================================\n# MODEL CONFIGURATION\n# ============================================\n# Default model for completions (Claude 3.5 Sonnet v2 - latest)\nCOMPLETION_MODEL=claude-3-5-sonnet-20241022\n\n# Default provider (anthropic, openrouter, onnx, gemini)\nPROVIDER=anthropic\n\n# ============================================\n# ADVANCED: REASONINGBANK COST OPTIMIZATION\n# ============================================\n# To use cheap models for memory operations (46% savings):\n# 1. Set OPENROUTER_API_KEY above\n# 2. Create .swarm/reasoningbank.yaml with:\n#\n# reasoningbank:\n#   judge:\n#     model: \"deepseek/deepseek-r1\"\n#     max_tokens: 512\n#     temperature: 0\n#   distill:\n#     model: \"deepseek/deepseek-r1\"\n#     max_tokens: 2048\n#     temperature: 0.3\n#   embeddings:\n#     provider: \"openrouter\"\n#     model: \"deepseek/deepseek-r1\"\n#     dimensions: 1024\n#\n# This keeps Claude for main work but uses DeepSeek for memory (99% cheaper)\n# Result: $0.37 ‚Üí $0.20 per task with memory (46% savings!)\n\n# ============================================\n# OPTIONAL API KEYS\n# ============================================\n# Perplexity API key (for GOAP search integration)\nPERPLEXITY_API_KEY=\n\n# Hugging Face API key (for ONNX models)\nHUGGINGFACE_API_KEY=\n\n# E2B API keys (for Flow Nexus sandbox deployment)\nE2B_API_KEY=\nE2B_ACCESS_TOKEN=\n\n# Supabase configuration (for Flow Nexus cloud features)\nSUPABASE_URL=\nSUPABASE_ANON_KEY=\nSUPABASE_ACCESS_TOKEN=\nSUPABASE_PROJECT_ID=\n\n# ============================================\n# WHAT HAPPENS WITHOUT .env?\n# ============================================\n# Without this file:\n# 1. No automatic environment variable loading\n# 2. ReasoningBank falls back to heuristic judgment (regex-based)\n# 3. No actual learning or memory consolidation\n# 4. Demo will appear to work but uses pattern matching only\n#\n# You can still work without .env by:\n# - Manually exporting environment variables\n# - Or passing inline with commands\n#\n# But using .env is recommended for convenience and security.\n\n# ============================================\n# SECURITY NOTES\n# ============================================\n# 1. NEVER commit this file to git (it's in .gitignore)\n# 2. Use different keys for dev/staging/production\n# 3. Rotate keys regularly\n# 4. Use key-specific permissions when possible\n`;\n\n  // Write template\n  try {\n    await fs.writeFile(envPath, template, 'utf8');\n    printSuccess('‚úÖ Created .env template file');\n    return { exists: false, created: true, path: envPath };\n  } catch (error) {\n    printError(`‚ùå Failed to create .env template: ${error.message}`);\n    return { exists: false, created: false, error: error.message };\n  }\n}\n\n/**\n * Check if .env exists and has required keys\n */\nexport async function checkEnvConfig(workingDir = process.cwd()) {\n  const envPath = path.join(workingDir, '.env');\n\n  if (!existsSync(envPath)) {\n    return {\n      exists: false,\n      hasApiKeys: false,\n      message: '.env file not found'\n    };\n  }\n\n  try {\n    const envContent = await fs.readFile(envPath, 'utf8');\n\n    // Check for API keys (not commented out and not empty)\n    const hasAnthropicKey = /^ANTHROPIC_API_KEY=[^\\s]+$/m.test(envContent);\n    const hasOpenRouterKey = /^OPENROUTER_API_KEY=[^\\s]+$/m.test(envContent);\n    const hasGeminiKey = /^GOOGLE_GEMINI_API_KEY=[^\\s]+$/m.test(envContent);\n\n    return {\n      exists: true,\n      hasApiKeys: hasAnthropicKey || hasOpenRouterKey || hasGeminiKey,\n      keys: {\n        anthropic: hasAnthropicKey,\n        openrouter: hasOpenRouterKey,\n        gemini: hasGeminiKey\n      },\n      message: 'Configuration found'\n    };\n  } catch (error) {\n    return {\n      exists: true,\n      hasApiKeys: false,\n      message: `Error reading .env: ${error.message}`\n    };\n  }\n}\n\n/**\n * Show .env setup instructions\n */\nexport function showEnvSetupInstructions() {\n  console.log('\\nüìã Setting up .env for ReasoningBank capabilities:\\n');\n  console.log('1. Create .env file:');\n  console.log('   claude-flow init --env\\n');\n  console.log('2. Add your API keys to .env:');\n  console.log('   ANTHROPIC_API_KEY=sk-ant-...');\n  console.log('   OPENROUTER_API_KEY=sk-or-v1-...  # Optional: 99% cost savings\\n');\n  console.log('3. Get API keys:');\n  console.log('   ‚Ä¢ Anthropic: https://console.anthropic.com/settings/keys');\n  console.log('   ‚Ä¢ OpenRouter: https://openrouter.ai/keys (for cost optimization)\\n');\n  console.log('üí° Without API keys:');\n  console.log('   ‚Ä¢ ReasoningBank falls back to regex pattern matching (no learning)');\n  console.log('   ‚Ä¢ Memory operations will appear to work but won\\'t actually learn\\n');\n  console.log('üí∞ Cost optimization:');\n  console.log('   ‚Ä¢ Use OpenRouter + DeepSeek R1 for judge/distill (99% cheaper)');\n  console.log('   ‚Ä¢ See: docs/REASONINGBANK-COST-OPTIMIZATION.md\\n');\n}\n"],"names":["printSuccess","printError","printWarning","existsSync","promises","fs","path","generateEnvTemplate","workingDir","process","cwd","force","envPath","join","console","log","exists","created","template","Date","toISOString","writeFile","error","message","checkEnvConfig","hasApiKeys","envContent","readFile","hasAnthropicKey","test","hasOpenRouterKey","hasGeminiKey","keys","anthropic","openrouter","gemini","showEnvSetupInstructions"],"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,EAAEC,YAAY,QAAQ,cAAc;AACrE,SAASC,UAAU,QAAQ,KAAK;AAChC,SAASC,YAAYC,EAAE,QAAQ,KAAK;AACpC,OAAOC,UAAU,OAAO;AAKxB,OAAO,eAAeC,oBAAoBC,aAAaC,QAAQC,GAAG,EAAE,EAAEC,QAAQ,KAAK;IACjF,MAAMC,UAAUN,KAAKO,IAAI,CAACL,YAAY;IAGtC,IAAIL,WAAWS,YAAY,CAACD,OAAO;QACjCT,aAAa;QACbY,QAAQC,GAAG,CAAC;QACZ,OAAO;YAAEC,QAAQ;YAAMC,SAAS;QAAM;IACxC;IAEA,MAAMC,WAAW,CAAC;;WAET,EAAE,IAAIC,OAAOC,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FtC,CAAC;IAGC,IAAI;QACF,MAAMf,GAAGgB,SAAS,CAACT,SAASM,UAAU;QACtClB,aAAa;QACb,OAAO;YAAEgB,QAAQ;YAAOC,SAAS;YAAMX,MAAMM;QAAQ;IACvD,EAAE,OAAOU,OAAO;QACdrB,WAAW,CAAC,kCAAkC,EAAEqB,MAAMC,OAAO,EAAE;QAC/D,OAAO;YAAEP,QAAQ;YAAOC,SAAS;YAAOK,OAAOA,MAAMC,OAAO;QAAC;IAC/D;AACF;AAKA,OAAO,eAAeC,eAAehB,aAAaC,QAAQC,GAAG,EAAE;IAC7D,MAAME,UAAUN,KAAKO,IAAI,CAACL,YAAY;IAEtC,IAAI,CAACL,WAAWS,UAAU;QACxB,OAAO;YACLI,QAAQ;YACRS,YAAY;YACZF,SAAS;QACX;IACF;IAEA,IAAI;QACF,MAAMG,aAAa,MAAMrB,GAAGsB,QAAQ,CAACf,SAAS;QAG9C,MAAMgB,kBAAkB,8BAA8BC,IAAI,CAACH;QAC3D,MAAMI,mBAAmB,+BAA+BD,IAAI,CAACH;QAC7D,MAAMK,eAAe,kCAAkCF,IAAI,CAACH;QAE5D,OAAO;YACLV,QAAQ;YACRS,YAAYG,mBAAmBE,oBAAoBC;YACnDC,MAAM;gBACJC,WAAWL;gBACXM,YAAYJ;gBACZK,QAAQJ;YACV;YACAR,SAAS;QACX;IACF,EAAE,OAAOD,OAAO;QACd,OAAO;YACLN,QAAQ;YACRS,YAAY;YACZF,SAAS,CAAC,oBAAoB,EAAED,MAAMC,OAAO,EAAE;QACjD;IACF;AACF;AAKA,OAAO,SAASa;IACdtB,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd"}