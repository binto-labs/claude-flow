{"version":3,"sources":["../../../../src/cli/simple-commands/proxy.js"],"sourcesContent":["/**\n * OpenRouter Proxy Server Commands\n * Standalone proxy server that translates Anthropic API calls to OpenRouter\n * Enables 85-98% cost savings with Claude Code integration\n * NEW in v2.6.0 - Full integration with agentic-flow v1.5.5+\n */\n\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n/**\n * Main proxy command handler\n */\nexport async function proxyCommand(subArgs, flags) {\n  const proxyCmd = subArgs[0];\n\n  switch (proxyCmd) {\n    case 'start':\n      await startProxy(subArgs, flags);\n      break;\n\n    case 'stop':\n      await stopProxy(subArgs, flags);\n      break;\n\n    case 'status':\n      await getProxyStatus(subArgs, flags);\n      break;\n\n    case 'logs':\n      await getProxyLogs(subArgs, flags);\n      break;\n\n    case 'restart':\n      await restartProxy(subArgs, flags);\n      break;\n\n    case 'config':\n    case 'configure':\n      await configureProxy(subArgs, flags);\n      break;\n\n    default:\n      showProxyHelp();\n  }\n}\n\n/**\n * Start OpenRouter proxy server\n * Usage: claude-flow proxy start [--port 8080]\n */\nasync function startProxy(subArgs, flags) {\n  printSuccess('üöÄ Starting OpenRouter proxy server...');\n  console.log('This proxy enables Claude Code to use OpenRouter models');\n  console.log('Potential cost savings: 85-98% vs direct Anthropic API\\n');\n\n  try {\n    let cmd = 'npx agentic-flow proxy';\n\n    if (flags.port) {\n      cmd += ` --port ${flags.port}`;\n    }\n\n    if (flags.host) {\n      cmd += ` --host ${flags.host}`;\n    }\n\n    if (flags.daemon || flags.background) {\n      cmd += ' &';\n    }\n\n    const { stdout, stderr } = await execAsync(cmd, {\n      timeout: flags.daemon ? 10000 : 0, // Short timeout for daemon mode\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    if (stdout) {\n      console.log(stdout);\n    }\n\n    printSuccess('‚úÖ OpenRouter proxy started successfully!');\n    console.log('\\nüìã Next steps:');\n    console.log('  1. Set environment variable:');\n    console.log(`     export ANTHROPIC_BASE_URL=http://localhost:${flags.port || 8080}`);\n    console.log('  2. Configure Claude Code to use the proxy');\n    console.log('  3. Your OpenRouter key will be used automatically');\n    console.log('  4. Check status: claude-flow proxy status');\n    console.log('\\nüí∞ Cost Savings:');\n    console.log('  - Anthropic Claude 3.5 Sonnet: ~$3 per million tokens');\n    console.log('  - OpenRouter Claude 3.5 Sonnet: ~$0.30 per million tokens');\n    console.log('  - Savings: ~90% (10x cheaper!)');\n  } catch (error) {\n    if (error.killed && flags.daemon) {\n      printSuccess('‚úÖ Proxy started in background!');\n      console.log('Check status: claude-flow proxy status');\n    } else {\n      printError('‚ùå Failed to start proxy server');\n      console.error(error.message);\n      if (error.stderr) {\n        console.error('Details:', error.stderr);\n      }\n      process.exit(1);\n    }\n  }\n}\n\n/**\n * Stop OpenRouter proxy server\n * Usage: claude-flow proxy stop\n */\nasync function stopProxy(subArgs, flags) {\n  printWarning('üõë Stopping OpenRouter proxy server...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow proxy stop', {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n    printSuccess('‚úÖ Proxy server stopped');\n    console.log('\\nRemember to unset ANTHROPIC_BASE_URL if needed:');\n    console.log('  unset ANTHROPIC_BASE_URL');\n  } catch (error) {\n    printError('‚ùå Failed to stop proxy server');\n    console.error(error.message);\n    console.log('\\nTip: You can also stop it manually:');\n    console.log('  ps aux | grep \"agentic-flow proxy\"');\n    console.log('  kill -9 <PID>');\n    process.exit(1);\n  }\n}\n\n/**\n * Get proxy server status\n * Usage: claude-flow proxy status\n */\nasync function getProxyStatus(subArgs, flags) {\n  printSuccess('üìä Getting OpenRouter proxy status...');\n\n  try {\n    const { stdout } = await execAsync('npx agentic-flow proxy status', {\n      timeout: 30000,\n    });\n\n    console.log(stdout);\n\n    if (flags.verbose || flags.detailed) {\n      console.log('\\nüîß Configuration:');\n      console.log('  Base URL: http://localhost:8080 (default)');\n      console.log('  Protocol: HTTP/1.1');\n      console.log('  Translation: Anthropic API ‚Üí OpenRouter API');\n      console.log('\\nüìù Usage:');\n      console.log('  1. export ANTHROPIC_BASE_URL=http://localhost:8080');\n      console.log('  2. Use Claude Code normally');\n      console.log('  3. All requests route through OpenRouter');\n    }\n  } catch (error) {\n    printError('‚ùå Failed to get proxy status');\n    console.error(error.message);\n    console.log('\\nTip: Proxy may not be running. Start it with:');\n    console.log('  claude-flow proxy start');\n    process.exit(1);\n  }\n}\n\n/**\n * Get proxy server logs\n * Usage: claude-flow proxy logs [--lines 100] [--follow]\n */\nasync function getProxyLogs(subArgs, flags) {\n  printSuccess('üìÑ Getting OpenRouter proxy logs...');\n\n  try {\n    let cmd = 'npx agentic-flow proxy logs';\n\n    if (flags.lines) {\n      cmd += ` --lines ${flags.lines}`;\n    }\n\n    if (flags.follow || flags.f) {\n      cmd += ' --follow';\n    }\n\n    if (flags.error) {\n      cmd += ' --error';\n    }\n\n    const { stdout } = await execAsync(cmd, {\n      timeout: flags.follow ? 0 : 30000, // No timeout for follow mode\n      maxBuffer: 10 * 1024 * 1024,\n    });\n\n    console.log(stdout);\n  } catch (error) {\n    printError('‚ùå Failed to get proxy logs');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\n/**\n * Restart proxy server\n * Usage: claude-flow proxy restart\n */\nasync function restartProxy(subArgs, flags) {\n  printWarning('üîÑ Restarting OpenRouter proxy server...');\n\n  try {\n    // Stop first\n    await stopProxy(subArgs, { ...flags, quiet: true });\n\n    // Wait a moment\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    // Start again\n    await startProxy(subArgs, flags);\n\n    printSuccess('‚úÖ Proxy server restarted successfully!');\n  } catch (error) {\n    printError('‚ùå Failed to restart proxy server');\n    console.error(error.message);\n    process.exit(1);\n  }\n}\n\n/**\n * Configure proxy server\n * Usage: claude-flow proxy config\n */\nasync function configureProxy(subArgs, flags) {\n  printSuccess('üîß OpenRouter Proxy Configuration');\n\n  console.log('\\nüìã Current Setup:');\n  console.log('  1. Proxy translates Anthropic API calls to OpenRouter');\n  console.log('  2. Default port: 8080');\n  console.log('  3. Requires OPENROUTER_API_KEY environment variable');\n\n  console.log('\\nüîë API Key Setup:');\n  console.log('  export OPENROUTER_API_KEY=\"sk-or-v1-...\"');\n\n  console.log('\\nüåê Claude Code Integration:');\n  console.log('  export ANTHROPIC_BASE_URL=\"http://localhost:8080\"');\n\n  console.log('\\nüí° Recommended Models:');\n  console.log('  - anthropic/claude-3.5-sonnet:beta (90% cheaper)');\n  console.log('  - anthropic/claude-3-opus:beta (85% cheaper)');\n  console.log('  - deepseek/deepseek-r1-0528:free (100% free!)');\n\n  console.log('\\n‚öôÔ∏è  Advanced Configuration:');\n  console.log('  export PROXY_PORT=8080              # Custom port');\n  console.log('  export PROXY_HOST=0.0.0.0           # Allow external connections');\n  console.log('  export PROXY_LOG_LEVEL=debug        # Verbose logging');\n\n  console.log('\\nüöÄ Quick Start:');\n  console.log('  1. claude-flow agent config set OPENROUTER_API_KEY sk-or-v1-...');\n  console.log('  2. claude-flow proxy start --daemon');\n  console.log('  3. export ANTHROPIC_BASE_URL=http://localhost:8080');\n  console.log('  4. Use Claude Code normally ‚Üí automatic 90% savings!');\n\n  if (flags.test) {\n    printSuccess('\\nüß™ Testing proxy connection...');\n    try {\n      const { stdout } = await execAsync('curl -s http://localhost:8080/health', {\n        timeout: 5000,\n      });\n      console.log('‚úÖ Proxy is responding:', stdout);\n    } catch (error) {\n      printWarning('‚ö†Ô∏è  Proxy not responding. Start it with: claude-flow proxy start');\n    }\n  }\n}\n\n/**\n * Show proxy command help\n */\nfunction showProxyHelp() {\n  console.log(`\nOpenRouter Proxy Server Commands\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nStandalone proxy server that translates Anthropic API calls to OpenRouter.\nEnables 85-98% cost savings with Claude Code integration.\n\nUSAGE:\n  claude-flow proxy <command> [options]\n\nCOMMANDS:\n  start               Start OpenRouter proxy server\n  stop                Stop proxy server\n  restart             Restart proxy server\n  status              Get proxy server status\n  logs                View proxy server logs\n  config              Show proxy configuration guide\n\nOPTIONS:\n  --port <number>     Server port (default: 8080)\n  --host <string>     Server host (default: localhost)\n  --daemon            Run in background\n  --background        Same as --daemon\n  --lines <number>    Number of log lines (default: 100)\n  --follow, -f        Follow log output in real-time\n  --error             Show only error logs\n  --test              Test proxy connection\n  --verbose           Verbose output\n\nEXAMPLES:\n  # Start proxy server\n  claude-flow proxy start\n  claude-flow proxy start --port 8080 --daemon\n\n  # Configure Claude Code to use proxy\n  export ANTHROPIC_BASE_URL=http://localhost:8080\n\n  # Check status\n  claude-flow proxy status\n  claude-flow proxy status --verbose\n\n  # View logs\n  claude-flow proxy logs\n  claude-flow proxy logs --lines 50 --follow\n  claude-flow proxy logs --error\n\n  # Stop/restart proxy\n  claude-flow proxy stop\n  claude-flow proxy restart\n\n  # Configuration guide\n  claude-flow proxy config\n  claude-flow proxy config --test\n\nSETUP GUIDE:\n  1. Get OpenRouter API key: https://openrouter.ai/keys\n  2. Set environment variable:\n     claude-flow agent config set OPENROUTER_API_KEY sk-or-v1-...\n\n  3. Start proxy server:\n     claude-flow proxy start --daemon\n\n  4. Configure Claude Code:\n     export ANTHROPIC_BASE_URL=http://localhost:8080\n\n  5. Use Claude Code normally - all requests route through OpenRouter!\n\nCOST SAVINGS:\n  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n  ‚îÇ                                                        ‚îÇ\n  ‚îÇ  Model: Claude 3.5 Sonnet                             ‚îÇ\n  ‚îÇ  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ                            ‚îÇ\n  ‚îÇ                                                        ‚îÇ\n  ‚îÇ  Anthropic Direct:     $3.00 per million tokens      ‚îÇ\n  ‚îÇ  OpenRouter Proxy:     $0.30 per million tokens      ‚îÇ\n  ‚îÇ  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ                            ‚îÇ\n  ‚îÇ  Savings: 90% (10x cheaper!)                          ‚îÇ\n  ‚îÇ                                                        ‚îÇ\n  ‚îÇ  For 100M tokens:                                     ‚îÇ\n  ‚îÇ  - Anthropic: $300                                    ‚îÇ\n  ‚îÇ  - OpenRouter: $30                                    ‚îÇ\n  ‚îÇ  - You save: $270                                     ‚îÇ\n  ‚îÇ                                                        ‚îÇ\n  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nFREE MODELS:\n  - deepseek/deepseek-r1-0528:free (100% free, high quality)\n  - meta-llama/llama-3.1-8b-instruct:free\n  - google/gemma-2-9b-it:free\n\nFEATURES:\n  ‚úÖ Transparent API translation (Anthropic ‚Üí OpenRouter)\n  ‚úÖ Works with Claude Code out of the box\n  ‚úÖ Automatic model mapping\n  ‚úÖ Request/response logging\n  ‚úÖ Error handling and retries\n  ‚úÖ Health check endpoint\n  ‚úÖ Zero code changes required\n\nFor more information, visit:\n  https://github.com/ruvnet/agentic-flow\n  https://www.npmjs.com/package/agentic-flow\n  https://openrouter.ai\n`);\n}\n"],"names":["printSuccess","printError","printWarning","exec","promisify","execAsync","proxyCommand","subArgs","flags","proxyCmd","startProxy","stopProxy","getProxyStatus","getProxyLogs","restartProxy","configureProxy","showProxyHelp","console","log","cmd","port","host","daemon","background","stdout","stderr","timeout","maxBuffer","error","killed","message","process","exit","verbose","detailed","lines","follow","f","quiet","Promise","resolve","setTimeout","test"],"mappings":"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"}