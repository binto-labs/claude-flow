{"version":3,"sources":["../../../../src/cli/commands/checkpoint.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Checkpoint Management Commands\n * Uses SDK checkpoint manager for Git-like checkpointing\n */\n\nimport { Command } from './commander-fix.js';\nimport chalk from 'chalk';\nimport { checkpointManager } from '../../sdk/checkpoint-manager.js';\nimport Table from 'cli-table3';\nimport inquirer from 'inquirer';\n\nexport const checkpointCommand = new Command()\n  .name('checkpoint')\n  .description('Manage session checkpoints (Git-like time travel for AI sessions)')\n  .action(() => {\n    checkpointCommand.help();\n  });\n\n// Create checkpoint\ncheckpointCommand\n  .command('create')\n  .description('Create a checkpoint for a session')\n  .argument('<session-id>', 'Session ID to checkpoint')\n  .argument('[description]', 'Checkpoint description')\n  .action(async (sessionId: string, description?: string) => {\n    try {\n      console.log(chalk.cyan(`Creating checkpoint for session: ${sessionId}`));\n\n      const checkpointId = await checkpointManager.createCheckpoint(\n        sessionId,\n        description || `Manual checkpoint at ${new Date().toLocaleString()}`\n      );\n\n      console.log(chalk.green('✓ Checkpoint created'));\n      console.log(`${chalk.white('ID:')} ${checkpointId}`);\n      console.log(`${chalk.white('Session:')} ${sessionId}`);\n      console.log(`${chalk.white('Description:')} ${description || '(auto-generated)'}`);\n      console.log(chalk.gray(`  Use 'claude-flow checkpoint rollback ${checkpointId}' to restore`));\n    } catch (error) {\n      console.error(chalk.red('Failed to create checkpoint:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// List checkpoints\ncheckpointCommand\n  .command('list')\n  .description('List checkpoints for a session')\n  .argument('<session-id>', 'Session ID')\n  .option('--format <format>', 'Output format (table, json)', 'table')\n  .action(async (sessionId: string, options: any) => {\n    try {\n      const checkpoints = checkpointManager.listCheckpoints(sessionId);\n\n      if (checkpoints.length === 0) {\n        console.log(chalk.gray(`No checkpoints found for session: ${sessionId}`));\n        return;\n      }\n\n      if (options.format === 'json') {\n        console.log(JSON.stringify(checkpoints, null, 2));\n        return;\n      }\n\n      console.log(chalk.cyan.bold(`Checkpoints for ${sessionId} (${checkpoints.length})`));\n      console.log('─'.repeat(80));\n\n      const table = new Table({\n        head: ['ID', 'Description', 'Messages', 'Tokens', 'Files', 'Created'],\n      });\n\n      for (const cp of checkpoints) {\n        table.push([\n          chalk.gray(cp.id.substring(0, 8) + '...'),\n          cp.description.substring(0, 30) + (cp.description.length > 30 ? '...' : ''),\n          cp.messageCount.toString(),\n          cp.totalTokens.toString(),\n          cp.filesModified.length.toString(),\n          new Date(cp.timestamp).toLocaleString(),\n        ]);\n      }\n\n      console.log(table.toString());\n    } catch (error) {\n      console.error(chalk.red('Failed to list checkpoints:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// Get checkpoint info\ncheckpointCommand\n  .command('info')\n  .description('Show detailed checkpoint information')\n  .argument('<checkpoint-id>', 'Checkpoint ID')\n  .action(async (checkpointId: string) => {\n    try {\n      const checkpoint = checkpointManager.getCheckpoint(checkpointId);\n\n      if (!checkpoint) {\n        console.error(chalk.red(`Checkpoint '${checkpointId}' not found`));\n        process.exit(1);\n      }\n\n      console.log(chalk.cyan.bold('Checkpoint Information'));\n      console.log('─'.repeat(50));\n      console.log(`${chalk.white('ID:')} ${checkpoint.id}`);\n      console.log(`${chalk.white('Session:')} ${checkpoint.sessionId}`);\n      console.log(`${chalk.white('Description:')} ${checkpoint.description}`);\n      console.log(`${chalk.white('Created:')} ${new Date(checkpoint.timestamp).toLocaleString()}`);\n      console.log();\n\n      console.log(chalk.cyan.bold('Statistics'));\n      console.log('─'.repeat(50));\n      console.log(`${chalk.white('Messages:')} ${checkpoint.messageCount}`);\n      console.log(`${chalk.white('Total Tokens:')} ${checkpoint.totalTokens}`);\n      console.log(`${chalk.white('Files Modified:')} ${checkpoint.filesModified.length}`);\n\n      if (checkpoint.filesModified.length > 0) {\n        console.log();\n        console.log(chalk.cyan.bold('Modified Files'));\n        console.log('─'.repeat(50));\n        for (const file of checkpoint.filesModified) {\n          console.log(`  • ${file}`);\n        }\n      }\n    } catch (error) {\n      console.error(chalk.red('Failed to show checkpoint info:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// Rollback to checkpoint\ncheckpointCommand\n  .command('rollback')\n  .description('Rollback session to a checkpoint (Git-like time travel)')\n  .argument('<checkpoint-id>', 'Checkpoint ID to restore')\n  .option('-p, --prompt <prompt>', 'Continue prompt after rollback')\n  .option('-f, --force', 'Skip confirmation')\n  .action(async (checkpointId: string, options: any) => {\n    try {\n      const checkpoint = checkpointManager.getCheckpoint(checkpointId);\n\n      if (!checkpoint) {\n        console.error(chalk.red(`Checkpoint '${checkpointId}' not found`));\n        process.exit(1);\n      }\n\n      console.log(chalk.cyan.bold('Checkpoint to restore:'));\n      console.log(`${chalk.white('Description:')} ${checkpoint.description}`);\n      console.log(`${chalk.white('Created:')} ${new Date(checkpoint.timestamp).toLocaleString()}`);\n      console.log(`${chalk.white('Messages:')} ${checkpoint.messageCount}`);\n      console.log(`${chalk.white('Files:')} ${checkpoint.filesModified.length}`);\n\n      if (!options.force) {\n        const { confirmed } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'confirmed',\n          message: 'Rollback to this checkpoint? (Current progress will be lost)',\n          default: false,\n        });\n\n        if (!confirmed) {\n          console.log(chalk.gray('Rollback cancelled'));\n          return;\n        }\n      }\n\n      console.log(chalk.yellow('Rolling back...'));\n      console.log(chalk.blue('  • Using SDK resumeSessionAt to rewind'));\n\n      await checkpointManager.rollbackToCheckpoint(\n        checkpointId,\n        options.prompt || 'Continue from checkpoint'\n      );\n\n      console.log(chalk.green('✓ Rolled back to checkpoint successfully'));\n      console.log(chalk.gray('  Session rewound to exact point using SDK'));\n    } catch (error) {\n      console.error(chalk.red('Failed to rollback:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// Delete checkpoint\ncheckpointCommand\n  .command('delete')\n  .description('Delete a checkpoint')\n  .argument('<checkpoint-id>', 'Checkpoint ID')\n  .option('-f, --force', 'Skip confirmation')\n  .action(async (checkpointId: string, options: any) => {\n    try {\n      const checkpoint = checkpointManager.getCheckpoint(checkpointId);\n\n      if (!checkpoint) {\n        console.error(chalk.red(`Checkpoint '${checkpointId}' not found`));\n        process.exit(1);\n      }\n\n      if (!options.force) {\n        const { confirmed } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'confirmed',\n          message: `Delete checkpoint '${checkpoint.description}'?`,\n          default: false,\n        });\n\n        if (!confirmed) {\n          console.log(chalk.gray('Delete cancelled'));\n          return;\n        }\n      }\n\n      await checkpointManager.deleteCheckpoint(checkpointId);\n      console.log(chalk.green('✓ Checkpoint deleted'));\n    } catch (error) {\n      console.error(chalk.red('Failed to delete checkpoint:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n"],"names":["Command","chalk","checkpointManager","Table","inquirer","checkpointCommand","name","description","action","help","command","argument","sessionId","console","log","cyan","checkpointId","createCheckpoint","Date","toLocaleString","green","white","gray","error","red","message","process","exit","option","options","checkpoints","listCheckpoints","length","format","JSON","stringify","bold","repeat","table","head","cp","push","id","substring","messageCount","toString","totalTokens","filesModified","timestamp","checkpoint","getCheckpoint","file","force","confirmed","prompt","type","default","yellow","blue","rollbackToCheckpoint","deleteCheckpoint"],"mappings":"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"}